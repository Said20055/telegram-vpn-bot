import asyncio

from aiogram import Dispatcher, F, Bot
from aiogram.enums import ChatType
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand, BotCommandScopeDefault, BotCommandScopeChat, BotCommandScopeAllPrivateChats
from aiogram.utils.callback_answer import CallbackAnswerMiddleware
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiohttp import web

# --- –®–ê–ì 1: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ loader ---
# –ú—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ: bot, config, logger –∏ –ö–õ–ò–ï–ù–¢ MARZBAN
from loader import bot, config, logger, marzban_client

# --- –®–ê–ì 2: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã ---
from db import setup_database
from tgbot.handlers import routers_list
from tgbot.middlewares.flood import ThrottlingMiddleware
from tgbot.handlers.webhook_handlers import yookassa_webhook_handler
from utils import broadcaster

scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
async def on_startup(bot, marzban): # –î–æ–±–∞–≤–∏–ª–∏ marzban –≤ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    setup_database()

    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    try:
        scheduler.start()
        logger.info("‚úÖ Scheduler started successfully.")
    except Exception as e:
        logger.error(f"‚ùå Failed to start scheduler: {e}", exc_info=True)
    
    # ...
    from tgbot.services.scheduler import schedule_jobs
    schedule_jobs(scheduler, bot)
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Marzban
    # if await marzban.is_online():
    #     logger.info("Marzban panel is online.")
    # else:
    #     logger.error("Could not connect to Marzban panel!")

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∑–∞–ø—É—Å–∫–µ
    await broadcaster.broadcast(bot, config.tg_bot.admin_ids, "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    logger.info("Startup message sent to admin.")

    # 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é
    await register_commands(bot)
    logger.info("Bot commands registered.")

    # 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
    if config.webhook.use_webhook:
        webhook_url = f"https://{config.webhook.domain}{config.webhook.url}"
        await bot.set_webhook(webhook_url, drop_pending_updates=True) # –î–æ–±–∞–≤–ª–µ–Ω–æ drop_pending_updates
        logger.info(f"Webhook set to: {webhook_url}")
    else:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Polling mode: Webhook deleted and pending updates dropped.")

# bot.py

async def register_commands(bot: Bot):
    logger.info("Registering bot commands...")

    # --- 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –í–°–ï–• –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
    user_commands = [
        BotCommand(command='start', description='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'),
        BotCommand(command='profile', description='üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'),
        BotCommand(command='payment', description='üí≥ –û–ø–ª–∞—Ç–∞'),
        BotCommand(command='support', description='üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞'),
        BotCommand(command='referral', description='ü§ù –†–µ—Ñ. –ø—Ä–æ–≥—Ä–∞–º–º–∞'),
        BotCommand(command='instruction', description='üì≤ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'),
        BotCommand(command='promo', description='üéÅ–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥'),
    ]
    await bot.set_my_commands(user_commands, BotCommandScopeDefault())

    # --- 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –†–ê–°–®–ò–†–ï–ù–ù–´–ï –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ê–î–ú–ò–ù–û–í ---
    # –≠—Ç–æ—Ç –Ω–∞–±–æ—Ä –ü–ï–†–ï–ó–ê–ü–ò–®–ï–¢ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    admin_commands = user_commands + [
        BotCommand(command='admin', description='üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'),
        BotCommand(command='cancel', description='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ'),
    ]
    if config.tg_bot.admin_ids:
        for admin_id in config.tg_bot.admin_ids:
            try:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
                await bot.set_my_commands(admin_commands, BotCommandScopeChat(chat_id=admin_id))
            except Exception as e:
                logger.error(f"Failed to set admin commands for {admin_id}: {e}")

    # --- 3. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —á–∞—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ---
    support_chat_commands = [
        BotCommand(command='close', description='üîí –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç'),
    ]
    if config.tg_bot.support_chat_id:
        try:
            await bot.set_my_commands(
                support_chat_commands, 
                BotCommandScopeChat(chat_id=config.tg_bot.support_chat_id)
            )
        except Exception as e:
            logger.error(f"Failed to set support chat commands: {e}")


def register_global_middlewares(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –º–∏–¥–ª–≤–∞—Ä–∏."""
    middleware_types = [
        ThrottlingMiddleware(),
    ]
    for middleware_type in middleware_types:
        dp.message.outer_middleware(middleware_type)
        dp.callback_query.outer_middleware(middleware_type)
    dp.callback_query.outer_middleware(CallbackAnswerMiddleware())
    logger.info("Global middlewares registered.")


def main_webhook():
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage, marzban=marzban_client)
    dp.include_routers(*routers_list)
    register_global_middlewares(dp)
    dp.startup.register(on_startup)

    app = web.Application()
    app['bot'] = bot

    app['marzban'] = marzban_client # –≠—Ç–æ —É –≤–∞—Å —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
    app['config'] = config # <--- –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
    
    
    # --- –ù–ê–®–ò –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
    # 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ Telegram
    telegram_webhook_handler = SimpleRequestHandler(dispatcher=dp, bot=bot)
    telegram_webhook_handler.register(app, path=config.webhook.url)
    
    # 2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤ YooKassa –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É—Ç—å
    app.router.add_post('/yookassa', yookassa_webhook_handler)

    setup_application(app, dp, bot=bot, marzban=marzban_client)
    
    logger.info("Starting bot in webhook mode...")
    web.run_app(app, host='0.0.0.0', port=8080)


async def main_polling():
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage, marzban=marzban_client)
    dp.include_routers(*routers_list)
    register_global_middlewares(dp)
    
    # –í—ã–∑—ã–≤–∞–µ–º on_startup –¥–æ –∑–∞–ø—É—Å–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    await on_startup(bot, marzban_client)
    
    logger.info("Starting bot in polling mode...")

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ YooKassa –≤ —Ñ–æ–Ω–µ
    yookassa_server_task = asyncio.create_task(start_yookassa_webhook_server(dp))

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ Telegram –≤ —Ñ–æ–Ω–µ
    polling_task = asyncio.create_task(dp.start_polling(bot))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –∑–∞–¥–∞—á–∏ –∏ –∂–¥–µ–º –∏—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—á—Ç–æ –≤ –Ω–æ—Ä–º–µ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç)
    await asyncio.gather(
        polling_task,
        yookassa_server_task
    )


async def start_yookassa_webhook_server(dp: Dispatcher):
    app = web.Application()
    
    # "–í–Ω–µ–¥—Ä—è–µ–º" –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –Ω–∞–º –æ–±—ä–µ–∫—Ç—ã
    app['bot'] = bot
    app['marzban'] = marzban_client # <--- –í–û–¢ –≠–¢–ê –°–¢–†–û–ö–ê –†–ï–®–ê–ï–¢ –ü–†–û–ë–õ–ï–ú–£
    app['config'] = config         # <--- –≠–¢–ê –°–¢–†–û–ö–ê –ù–£–ñ–ù–ê –î–õ–Ø –û–ü–û–í–ï–©–ï–ù–ò–ô –ê–î–ú–ò–ù–ê
    app['dp'] = dp
    
    app.router.add_post('/yookassa', yookassa_webhook_handler)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host='0.0.0.0', port=8081)
    await site.start()
    logger.info("YooKassa webhook server started on port 8081")
    while True:
        await asyncio.sleep(3600)


if __name__ == '__main__':
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ loader.py
    logger.info("Initializing bot...")
    
    if config.webhook.use_webhook:
        main_webhook()
    else:
        try:
            asyncio.run(main_polling())
        except (KeyboardInterrupt, SystemExit):
            logger.warning("Bot stopped!")