import logging
from aiogram.utils.keyboard import InlineKeyboardBuilder
from db import Tariff 
logger = logging.getLogger(__name__)


def main_menu_keyboard():  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª keyboard_start –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    """
    –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é –∏ –ø–æ—Å–ª–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.
    """
    builder = InlineKeyboardBuilder()
    # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—à–µ–π –ª–æ–≥–∏–∫–æ–π
    builder.button(text='üíé –ü–æ–ª—É—á–∏—Ç—å VPN', callback_data='get_vpn')
    builder.button(text='üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='my_profile')
    builder.button(text='ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', callback_data='referral_program')
    builder.button(text='‚ÑπÔ∏è –ü–æ–º–æ—â—å', callback_data='help_info')
    builder.button(text='üíé –ü—Ä–æ–¥–ª–∏—Ç—å / –û–ø–ª–∞—Ç–∏—Ç—å', callback_data='buy_subscription')
    
    # –†–∞—Å—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥, –ø–æ—Å–ª–µ–¥–Ω—è—è –±—É–¥–µ—Ç –æ–¥–Ω–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É
    builder.adjust(2, 1)
    return builder.as_markup()

def tariffs_keyboard(tariffs: list[Tariff]):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∞—Ä–∏—Ñ–æ–≤."""
    logger.info("--- Entering tariffs_keyboard function ---")
    builder = InlineKeyboardBuilder()
    
    for i, tariff in enumerate(tariffs):
        # --- –û–¢–õ–ê–î–ö–ê ---
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ —Ç–∞—Ä–∏—Ñ–∞ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        tariff_id = tariff.id
        tariff_name = tariff.name
        tariff_price = tariff.price
        
        logger.info(f"Processing tariff #{i}: ID={tariff_id}, Name='{tariff_name}', Price={tariff_price}")
        
        if not tariff_id:
            logger.error(f"CRITICAL: Tariff #{i} has an empty ID! Skipping this button.")
            continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç ID

        callback_data_str = f"select_tariff_{tariff_id}"
        button_text = f"{tariff_name} - {tariff_price} RUB"
        
        logger.info(f"Creating button: Text='{button_text}', Callback='{callback_data_str}'")

        builder.button(
            text=button_text,
            callback_data=callback_data_str
        )

    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
    builder.adjust(1)
    
    logger.info("--- Exiting tariffs_keyboard function ---")
    return builder.as_markup()
def help_keyboard(): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª keyboard_help –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–ü–æ–º–æ—â—å" —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text='–ö–ª–∏–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', url='https://marzban-docs.sm1ky.com/start/reality_app/')
    # –î–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.button(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_main_menu')
    builder.adjust(1) # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()


def back_to_main_menu_keyboard():
    """
    –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥".
    –ë—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–∞ –≤–æ –º–Ω–æ–≥–∏—Ö –º–µ—Å—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –ø—Ä–æ—Ñ–∏–ª–µ –∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ.
    """
    builder = InlineKeyboardBuilder()
    builder.button(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_main_menu')
    return builder.as_markup()

# –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è keyboard_cancel() –±—ã–ª–∞ –¥–ª—è FSM, –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –µ—ë –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –æ–Ω–∞ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
def keyboard_cancel():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∫–∞–∫–æ–≥–æ-–ª–∏–±–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (FSM)."""
    builder = InlineKeyboardBuilder()
    builder.button(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_fsm') # –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–µ–ª–∞—Ç—å callback_data –±–æ–ª–µ–µ —è–≤–Ω—ã–º–∏
    return builder.as_markup()