# tgbot/services/scheduler.py

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot
from datetime import datetime, timedelta

from database import requests as db
from tgbot.keyboards.inline import tariffs_keyboard # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏
from .utils import decline_word
from loader import logger

# --- 1. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---

async def send_reminder(bot: Bot, user, text: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Ç–∞—Ä–∏—Ñ–æ–≤."""
    try:
        active_tariffs = db.get_active_tariffs()
        tariffs_list = list(active_tariffs) if active_tariffs else []
        
        await bot.send_message(
            chat_id=user.user_id,
            text=text,
            reply_markup=tariffs_keyboard(tariffs_list) if tariffs_list else None
        )
        logger.info(f"Sent reminder to user {user.user_id}")
    except Exception as e:
        logger.warning(f"Failed to send reminder to user {user.user_id}. Error: {e}")


# --- 2. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –≤—ã–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---

async def check_subscriptions(bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–∏–±–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    logger.info("Scheduler job: Running subscription check...")
    
    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –¥–Ω—è–º (7 –∏ 3 –¥–Ω—è) ---
    for days_left in [7, 3]:
        users_to_remind = db.get_users_with_expiring_subscription(days_left)
        if not users_to_remind:
            continue
            
        logger.info(f"Found {len(users_to_remind)} users with {days_left} days left.")
        day_word = decline_word(days_left, ['–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π'])
        text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {{user_full_name}}!\n\n"
            f"–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ <b>{days_left} {day_word}</b>.\n\n"
            "–ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ–µ."
        )
        for user in users_to_remind:
            await send_reminder(bot, user, text.format(user_full_name=user.full_name))

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —á–∞—Å–∞–º (–º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤) ---
    users_less_than_day = db.get_users_with_expiring_subscription_in_hours(24)
    if not users_less_than_day:
        return # –ó–∞–≤–µ—Ä—à–∞–µ–º, –µ—Å–ª–∏ —Ç–∞–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç
        
    logger.info(f"Found {len(users_less_than_day)} users with less than 24 hours left.")
    for user in users_less_than_day:
        hours_left = int((user.subscription_end_date - datetime.now()).total_seconds() / 3600)
        if hours_left <= 0: continue

        hour_word = decline_word(hours_left, ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤'])
        text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.full_name}!\n\n"
            f"‚ùóÔ∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —É–∂–µ —Å–µ–≥–æ–¥–Ω—è, –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ <b>{hours_left} {hour_word}</b>.\n\n"
            "–ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."
        )
        await send_reminder(bot, user, text)


# --- 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---

def schedule_jobs(scheduler: AsyncIOScheduler, bot: Bot):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.
    """
    # –ó–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 –ø–æ –ú–°–ö
    scheduler.add_job(
        check_subscriptions, 
        trigger='cron', 
        hour=9,        # –£–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å
        minute=30,          # –£–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω—É—Ç—É
        kwargs={'bot': bot}
    )
    
    logger.info("Scheduler jobs added.")