# tgbot/handlers/user/payment.py (–ü–æ–ª–Ω–∞—è, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

from datetime import datetime
from aiogram import Router, F, Bot
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command

from loader import logger
from database import requests as db
from marzban.init_client import MarzClientCache
from tgbot.handlers.user.profile import show_profile_logic
from tgbot.keyboards.inline import cancel_fsm_keyboard, tariffs_keyboard, back_to_main_menu_keyboard
from tgbot.services import payment

payment_router = Router()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class PromoApplyFSM(StatesGroup):
    awaiting_code = State()

# =============================================================================
# --- –ë–õ–û–ö 1: –ü–û–ö–ê–ó –¢–ê–†–ò–§–û–í ---
# =============================================================================

async def show_tariffs_logic(event: Message | CallbackQuery, state: FSMContext):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤."""
    fsm_data = await state.get_data()
    discount = fsm_data.get("discount")
    
    active_tariffs = db.get_active_tariffs()
    tariffs_list = list(active_tariffs) if active_tariffs else []

    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:"
    if discount:
        text = f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ <b>{discount}%</b> –ø—Ä–∏–º–µ–Ω–µ–Ω!\n\n" + text

    reply_markup = tariffs_keyboard(tariffs_list)

    if not tariffs_list:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏."
        reply_markup = back_to_main_menu_keyboard()
    
    if isinstance(event, CallbackQuery):
        await event.message.edit_text(text, reply_markup=reply_markup)
    else:
        await event.answer(text, reply_markup=reply_markup)

@payment_router.message(Command("payment"))
async def payment_command_handler(message: Message, state: FSMContext):
    await show_tariffs_logic(message, state)

@payment_router.callback_query(F.data == "buy_subscription")
async def buy_subscription_callback_handler(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await show_tariffs_logic(call, state)

# =============================================================================
# --- –ë–õ–û–ö 2: –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ü–†–û–ú–û–ö–û–î–ê ---
# =============================================================================
async def _start_promo_input(event: Message | CallbackQuery, state: FSMContext):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞.
    """
    await state.set_state(PromoApplyFSM.awaiting_code)
    
    text = "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:"
    # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞" –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É —Ç–∞—Ä–∏—Ñ–æ–≤
    reply_markup = back_to_main_menu_keyboard()

    if isinstance(event, CallbackQuery):
        await event.message.edit_text(text, reply_markup=reply_markup)
    else: # –µ—Å–ª–∏ —ç—Ç–æ Message
        await event.answer(text, reply_markup=reply_markup)


@payment_router.message(Command("promo"))
async def promo_command_handler(message: Message, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ."""
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await _start_promo_input(message, state)


# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥" ---
@payment_router.callback_query(F.data == "enter_promo_code")
async def enter_promo_callback_handler(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ."""
    await call.answer()
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await _start_promo_input(call, state)
        
@payment_router.message(PromoApplyFSM.awaiting_code)
async def process_promo_code(message: Message, state: FSMContext, bot: Bot, marzban: MarzClientCache):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥."""
    code = message.text.upper()
    promo = db.get_promo_code(code)
    user_id = message.from_user.id

    await message.delete() # –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º

    error_text = None
    if not promo: error_text = "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω."
    elif promo.uses_left <= 0: error_text = "–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è."
    elif promo.expire_date and promo.expire_date < datetime.now(): error_text = "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫."
    elif db.has_user_used_promo(user_id, promo.id): error_text = "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥."

    if error_text:
        await message.answer(error_text)
        return

    db.use_promo_code(user_id, promo)

    if promo.bonus_days > 0:
        await state.clear()
        user_from_db = db.get_user(user_id) # –ü–æ–ª—É—á–∞–µ–º —é–∑–µ—Ä–∞ –æ–¥–∏–Ω —Ä–∞–∑
        marzban_username = (user_from_db.marzban_username or f"user_{user_id}").lower()
        
        try:
            # --- –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à "—É–º–Ω—ã–π" –º–µ—Ç–æ–¥ modify_user ---
            await marzban.modify_user(username=marzban_username, expire_days=promo.bonus_days)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ Marzban
            db.extend_user_subscription(user_id, promo.bonus_days)
            if not user_from_db.marzban_username:
                db.update_user_marzban_username(user_id, marzban_username)
            
            await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{promo.bonus_days} –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π</b>.")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            await show_profile_logic(message, marzban, bot)

        except Exception as e:
            logger.error(f"Failed to apply bonus days for promo code {code} for user {user_id}: {e}", exc_info=True)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    
    elif promo.discount_percent > 0:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–∏–¥–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã
        await state.set_state(None) # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        await state.update_data(discount=promo.discount_percent, promo_code=code)
        await show_tariffs_logic(message, state)

# =============================================================================
# --- –ë–õ–û–ö 3: –í–´–ë–û–† –¢–ê–†–ò–§–ê –ò –°–û–ó–î–ê–ù–ò–ï –ü–õ–ê–¢–ï–ñ–ê ---
# =============================================================================

@payment_router.callback_query(F.data.startswith("select_tariff_"))
async def select_tariff_handler(call: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É."""
    await call.answer()
    
    tariff_id = int(call.data.split("_")[2])
    tariff = db.get_tariff_by_id(tariff_id)
    if not tariff:
        await call.message.edit_text("–û—à–∏–±–∫–∞! –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_to_main_menu_keyboard())
        return

    fsm_data = await state.get_data()
    discount_percent = fsm_data.get("discount")
    promo_code = fsm_data.get("promo_code")

    original_price = tariff.price
    final_price = original_price
    
    if discount_percent:
        final_price = round(original_price * (1 - discount_percent / 100), 2)
        price_text = (
            f"<s>{original_price} RUB</s>\n"
            f"–°–∫–∏–¥–∫–∞ {discount_percent}% ({promo_code}): <b>{final_price} RUB</b>"
        )
    else:
        price_text = f"<b>{original_price} RUB</b>"

    payment_url, _ = payment.create_payment(
        user_id=call.from_user.id,
        amount=final_price,
        description=f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ '{tariff.name}'" + (f" (—Å–∫–∏–¥–∫–∞ {discount_percent}%)" if discount_percent else ""),
        bot_username=(await bot.get_me()).username,
        metadata={'user_id': str(call.from_user.id), 'tariff_id': tariff_id}
    )

    payment_kb = InlineKeyboardBuilder()
    payment_kb.button(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)
    payment_kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞", callback_data="buy_subscription")
    payment_kb.adjust(1)
    
    sent_message = await call.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: <b>{tariff.name}</b>\n"
        f"–°—Ä–æ–∫: <b>{tariff.duration_days} –¥–Ω–µ–π</b>\n\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {price_text}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.",
        reply_markup=payment_kb.as_markup()
    )
    await state.update_data(payment_message_id=sent_message.message_id)