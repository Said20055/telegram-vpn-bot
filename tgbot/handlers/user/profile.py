# tgbot/handlers/user/profile.py

from aiogram import Router, F, types, Bot
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.exceptions import TelegramBadRequest
from aiohttp.client_exceptions import ClientConnectionError
from aiogram.filters import Command
from datetime import datetime

from loader import logger
from marzban.init_client import MarzClientCache
from tgbot.keyboards.inline import profile_keyboard, back_to_main_menu_keyboard
from tgbot.services import qr_generator
from tgbot.services.utils import format_traffic, get_marzban_user_info, get_user_attribute
from urllib.parse import quote_plus

profile_router = Router()


# --- 1. –°–æ–∑–¥–∞–µ–º –û–ë–©–£–Æ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è ---
async def show_profile_logic(event: Message | CallbackQuery, marzban: MarzClientCache, bot: Bot):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ webhook_handler.
    """
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è
    user_id = event.from_user.id

    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    db_user, marzban_user = await get_marzban_user_info(event, marzban)
    if not marzban_user:
        return

    # --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–≤–∞—à –∫–æ–¥) ---
    status = get_user_attribute(marzban_user, 'status', 'unknown')
    expire_ts = get_user_attribute(marzban_user, 'expire')
    expire_date = datetime.fromtimestamp(expire_ts).strftime('%d.%m.%Y %H:%M') if expire_ts else "–ù–∏–∫–æ–≥–¥–∞"

    used_traffic = get_user_attribute(marzban_user, 'used_traffic', 0)
    data_limit = get_user_attribute(marzban_user, 'data_limit')
    used_traffic_str = format_traffic(used_traffic)
    data_limit_str = "–ë–µ–∑–ª–∏–º–∏—Ç" if data_limit == 0 or data_limit is None else format_traffic(data_limit)

    sub_url = get_user_attribute(marzban_user, 'subscription_url', '')
    full_sub_url = f"https://{marzban._config.webhook.domain}:8443{sub_url}" if sub_url else ""

    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üîë <b>–°—Ç–∞—Ç—É—Å:</b> <code>{status}</code>\n"
        f"üóì <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:</b> <code>{expire_date}</code>\n\n"
        f"üìä <b>–¢—Ä–∞—Ñ–∏–∫:</b>\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <code>{used_traffic_str}</code>\n"
        f"–õ–∏–º–∏—Ç: <code>{data_limit_str}</code>\n\n"
        f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):</b>\n<code>{full_sub_url}</code>"
    )

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å QR-–∫–æ–¥–æ–º ---
    try:
        qr_code_stream = qr_generator.create_qr_code(full_sub_url)
        qr_photo = types.BufferedInputFile(qr_code_stream.getvalue(), filename="qr.png")

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò ---
        
        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(event, types.CallbackQuery):
            try:
                await event.message.delete()
            except TelegramBadRequest:
                pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç bot
        await bot.send_photo(
            chat_id=user_id,
            photo=qr_photo,
            caption=profile_text,
            reply_markup=profile_keyboard(full_sub_url)
        )

    except Exception as e:
        logger.error(f"Error sending profile with QR: {e}", exc_info=True)
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò ---
        await bot.send_message(
            chat_id=user_id,
            text=profile_text,
            reply_markup=profile_keyboard(full_sub_url)
        )


# --- 2. –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏ ---
@profile_router.message(Command("profile"))
async def profile_command_handler(message: Message, marzban: MarzClientCache, bot: Bot):
    await show_profile_logic(message, marzban, bot)

@profile_router.callback_query(F.data == "my_profile")
async def my_profile_callback_handler(call: CallbackQuery, marzban: MarzClientCache, bot: Bot):
    await call.answer("–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    await show_profile_logic(call, marzban, bot)


# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è "–ú–æ–∏ –∫–ª—é—á–∏" (–æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@profile_router.callback_query(F.data == "my_keys")
async def my_keys_handler(call: CallbackQuery, marzban: MarzClientCache):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∫–ª—é—á–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
    await call.answer()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Å–∞–º—É—é —Å–µ—Ä–≤–∏—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    db_user, marzban_user = await get_marzban_user_info(call, marzban)
    if not marzban_user:
        return

    links = get_user_attribute(marzban_user, 'links', [])

    if not links:
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò ---
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        reply_markup = back_to_main_menu_keyboard()
        try:
            await call.message.edit_text(text, reply_markup=reply_markup)
        except TelegramBadRequest:
            await call.message.delete()
            await call.message.answer(text, reply_markup=reply_markup)
        return

    formatted_links = [f"<code>{link}</code>" for link in links]
    message_text = (
        "üîë <b>–í–æ—Ç –≤–∞—à–∏ –∫–ª—é—á–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n"
        "<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ, –∞ –∑–∞—Ç–µ–º –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –≤–∞—à–µ–º VPN-–∫–ª–∏–µ–Ω—Ç–µ.</i>\n\n" +
        "\n\n".join(formatted_links)
    )

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò ---
    reply_markup = back_to_main_menu_keyboard()
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —Ñ–æ—Ç–æ) –Ω–∞ –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
        await call.message.edit_text(
            text=message_text,
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
    except TelegramBadRequest:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –±—ã–ª–æ —Ñ–æ—Ç–æ), —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ —à–ª–µ–º –Ω–æ–≤–æ–µ
        try:
            await call.message.delete()
        except TelegramBadRequest:
            pass # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å - –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ
        await call.message.answer(
            text=message_text,
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
