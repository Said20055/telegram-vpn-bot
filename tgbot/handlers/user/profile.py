# tgbot/handlers/user/profile.py
import asyncio
from aiogram import Router, F, types, Bot
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.exceptions import TelegramBadRequest
from aiohttp.client_exceptions import ClientConnectionError
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
from urllib.parse import urlparse
from datetime import datetime

from loader import logger
from marzban.init_client import MarzClientCache
from tgbot.keyboards.inline import profile_keyboard, back_to_main_menu_keyboard, single_key_view_keyboard
from tgbot.services import qr_generator
from tgbot.services.utils import format_traffic, get_marzban_user_info, get_user_attribute
from urllib.parse import quote_plus

profile_router = Router()


# --- 1. –°–æ–∑–¥–∞–µ–º –û–ë–©–£–Æ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è ---
async def show_profile_logic(event: Message | CallbackQuery, marzban: MarzClientCache, bot: Bot):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ webhook_handler.
    """
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è
    user_id = event.from_user.id

    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    db_user, marzban_user = await get_marzban_user_info(event, marzban)
    if not marzban_user:
        return

    # --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–≤–∞—à –∫–æ–¥) ---
    status = get_user_attribute(marzban_user, 'status', 'unknown')
    expire_ts = get_user_attribute(marzban_user, 'expire')
    expire_date = datetime.fromtimestamp(expire_ts).strftime('%d.%m.%Y %H:%M') if expire_ts else "–ù–∏–∫–æ–≥–¥–∞"

    used_traffic = get_user_attribute(marzban_user, 'used_traffic', 0)
    data_limit = get_user_attribute(marzban_user, 'data_limit')
    used_traffic_str = format_traffic(used_traffic)
    data_limit_str = "–ë–µ–∑–ª–∏–º–∏—Ç" if data_limit == 0 or data_limit is None else format_traffic(data_limit)

    sub_url = get_user_attribute(marzban_user, 'subscription_url', '')
    full_sub_url = f"https://{marzban._config.webhook.domain}:8443{sub_url}" if sub_url else ""

    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üîë <b>–°—Ç–∞—Ç—É—Å:</b> <code>{status}</code>\n"
        f"üóì <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:</b> <code>{expire_date}</code>\n\n"
        f"üìä <b>–¢—Ä–∞—Ñ–∏–∫:</b>\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <code>{used_traffic_str}</code>\n"
        f"–õ–∏–º–∏—Ç: <code>{data_limit_str}</code>\n\n"
        f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):</b>\n<code>{full_sub_url}</code>"
    )

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å QR-–∫–æ–¥–æ–º ---
    try:
        qr_code_stream = qr_generator.create_qr_code(full_sub_url)
        qr_photo = types.BufferedInputFile(qr_code_stream.getvalue(), filename="qr.png")

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò ---
        
        # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(event, types.CallbackQuery):
            try:
                await event.message.delete()
            except TelegramBadRequest:
                pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –æ–±—ä–µ–∫—Ç bot
        await bot.send_photo(
            chat_id=user_id,
            photo=qr_photo,
            caption=profile_text,
            reply_markup=profile_keyboard(full_sub_url)
        )

    except Exception as e:
        logger.error(f"Error sending profile with QR: {e}", exc_info=True)
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò ---
        await bot.send_message(
            chat_id=user_id,
            text=profile_text,
            reply_markup=profile_keyboard(full_sub_url)
        )


# --- 2. –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏ ---
@profile_router.message(Command("profile"))
async def profile_command_handler(message: Message, marzban: MarzClientCache, bot: Bot):
    await show_profile_logic(message, marzban, bot)

@profile_router.callback_query(F.data == "my_profile")
async def my_profile_callback_handler(call: CallbackQuery, marzban: MarzClientCache, bot: Bot):
    await call.answer("–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    await show_profile_logic(call, marzban, bot)

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è "–ú–æ–∏ –∫–ª—é—á–∏" (–æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@profile_router.callback_query(F.data == "my_keys")
async def my_keys_handler(call: CallbackQuery, marzban: MarzClientCache):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞,
    –æ–±—ä–µ–¥–∏–Ω—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–∑–ª–∞—Ö –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö. (–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ API, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–µ —Å–ø–∏—Å–æ–∫)
    """
    await call.answer("–ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π...")
    
    db_user, marzban_user = await get_marzban_user_info(call, marzban)
    if not marzban_user: return

    links = get_user_attribute(marzban_user, 'links', [])
    if not links:
        # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞, –µ—Å–ª–∏ –∫–ª—é—á–µ–π –Ω–µ—Ç)
        return
        
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
    
    # 1. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
    nodes, inbounds_list = await asyncio.gather(
        marzban.get_nodes(),
        marzban.get_inbounds() # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –°–ü–ò–°–û–ö
    )

    # 2. –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    address_to_name_map = {node['address']: node['name'] for node in nodes}
    main_domain = marzban._config.webhook.domain
    if main_domain not in address_to_name_map:
        address_to_name_map[main_domain] = "–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä"
        
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø–æ—Ä—Ç–æ–≤, –∏—Ç–µ—Ä–∏—Ä—É—è—Å—å –ø–æ –°–ü–ò–°–ö–£ inbounds_list
    port_to_protocol_map = {}
    for inbound_data in inbounds_list:
        if isinstance(inbound_data, dict):
            port = str(inbound_data.get('port'))
            protocol = inbound_data.get('protocol', 'protocol?').upper()
            port_to_protocol_map[port] = protocol
    
    # 3. –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (—ç—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    keys_keyboard = InlineKeyboardBuilder()
    
    for i, link in enumerate(links):
        try:
            parsed_url = urlparse(link)
            server_address = parsed_url.hostname or parsed_url.netloc.split('@')[-1].split(':')[0]
            server_port = str(parsed_url.port or parsed_url.netloc.split(':')[-1])
        except Exception:
            server_address, server_port = "unknown", "unknown"
            
        node_name = address_to_name_map.get(server_address, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É–∑–µ–ª")
        protocol_name = port_to_protocol_map.get(server_port, "")
        
        button_text = f"üîë {node_name}"
        if protocol_name:
            button_text += f" ({protocol_name})"
        
        keys_keyboard.button(text=button_text, callback_data=f"show_key_{i}")
        
    keys_keyboard.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")
    keys_keyboard.adjust(1)
        
    text = "üîë <b>–í–∞—à–∏ –∫–ª—é—á–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–ª—é—á–∞:"
    
    try:
        await call.message.edit_text(text, reply_markup=keys_keyboard.as_markup())
    except TelegramBadRequest: # –ï—Å–ª–∏ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —Å —Ñ–æ—Ç–æ
        await call.message.delete()
        await call.message.answer(text, reply_markup=keys_keyboard.as_markup())

@profile_router.callback_query(F.data.startswith("show_key_"))
async def show_single_key_handler(call: CallbackQuery, marzban: MarzClientCache):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª—é—á, —Å–Ω–æ–≤–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞—è –¥–∞–Ω–Ω—ã–µ."""
    await call.answer()
    
    try:
        key_index = int(call.data.split("_")[2])
        
        # –°–Ω–æ–≤–∞ –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ Marzban, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
        db_user, marzban_user = await get_marzban_user_info(call, marzban)
        if not marzban_user: return
        
        links = get_user_attribute(marzban_user, 'links', [])
        selected_key = links[key_index]

        text = (
            f"üîë <b>–í–∞—à –∫–ª—é—á #{key_index + 1}</b>\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ:\n\n"
            f"<code>{selected_key}</code>"
        )
        await call.message.edit_text(text, reply_markup=single_key_view_keyboard())

    except (IndexError, ValueError, TypeError):
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)