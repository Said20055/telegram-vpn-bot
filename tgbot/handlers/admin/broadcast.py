# tgbot/handlers/admin/broadcast.py (–ü–æ–ª–Ω–∞—è, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è, —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)


import asyncio
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loader import logger

from database import requests as db
from tgbot.keyboards.inline import (broadcast_audience_keyboard, broadcast_promo_keyboard, 
                                    confirm_broadcast_keyboard, cancel_fsm_keyboard, admin_main_menu_keyboard)

admin_broadcast_router = Router()

class BroadcastFSM(StatesGroup):
    choose_audience = State()
    get_message = State()
    attach_promo = State()
    awaiting_promo = State()
    confirm = State()

# --- –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è ---
@admin_broadcast_router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(call: CallbackQuery, state: FSMContext):
    logger.debug(f"Broadcast start initiated by admin {call.from_user.id}")
    await state.clear()
    await state.set_state(BroadcastFSM.choose_audience)
    await call.message.edit_text(
        "üì£ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n<b>–®–∞–≥ 1/4:</b> –í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é:",
        reply_markup=broadcast_audience_keyboard()
    )

# --- –®–∞–≥ 1: –í—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ ---
@admin_broadcast_router.callback_query(F.data.startswith("broadcast_audience_"), BroadcastFSM.choose_audience)
async def choose_audience(call: CallbackQuery, state: FSMContext):
    audience = call.data.split("_")[2]
    await state.update_data(audience=audience)
    logger.debug(f"Admin {call.from_user.id} chose audience: '{audience}'. State data: {await state.get_data()}")
    
    await state.set_state(BroadcastFSM.get_message)
    await call.message.edit_text(
        "<b>–®–∞–≥ 2/4:</b> –ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
        reply_markup=cancel_fsm_keyboard("admin_broadcast")
    )

# --- –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
@admin_broadcast_router.message(BroadcastFSM.get_message)
async def get_message(message: Message, state: FSMContext):
    await state.update_data(
        message_to_send_chat_id=message.chat.id,
        message_to_send_id=message.message_id
    )
    data = await state.get_data()
    logger.debug(f"Admin {message.from_user.id} provided a message. Current state data: {data}")
    
    if data.get("audience") == "never":
        await state.set_state(BroadcastFSM.attach_promo)
        await message.answer(
            "<b>–®–∞–≥ 3/4:</b> –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–∫–∏–¥–∫—É?",
            reply_markup=broadcast_promo_keyboard()
        )
    else:
        await state.set_state(BroadcastFSM.confirm)
        await message.answer(
            "<b>–®–∞–≥ 4/4:</b> –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É.",
            reply_markup=confirm_broadcast_keyboard()
        )

# --- –®–∞–≥ 3 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π): –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ---
@admin_broadcast_router.callback_query(F.data == "broadcast_skip_promo", BroadcastFSM.attach_promo)
async def skip_promo(call: CallbackQuery, state: FSMContext):
    logger.debug(f"Admin {call.from_user.id} skipped promo attachment.")
    await state.set_state(BroadcastFSM.confirm)
    await call.message.edit_text(
        "<b>–®–∞–≥ 4/4:</b> –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞?",
        reply_markup=confirm_broadcast_keyboard()
    )

@admin_broadcast_router.callback_query(F.data == "broadcast_attach_promo", BroadcastFSM.attach_promo)
async def attach_promo(call: CallbackQuery, state: FSMContext):
    logger.debug(f"Admin {call.from_user.id} wants to attach a promo code.")
    await state.set_state(BroadcastFSM.awaiting_promo)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–∫–∏–¥–æ—á–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞.")

@admin_broadcast_router.message(BroadcastFSM.awaiting_promo)
async def get_promo(message: Message, state: FSMContext):
    promo_code = message.text.strip().upper()
    logger.debug(f"Admin {message.from_user.id} entered promo code: '{promo_code}'")
    
    promo = db.get_promo_code(promo_code)
    if not promo or promo.discount_percent == 0:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–∫–∏–¥–æ—á–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
        return
        
    await state.update_data(promo_code=promo_code)
    logger.debug(f"Promo code '{promo_code}' is valid. State data: {await state.get_data()}")
    await state.set_state(BroadcastFSM.confirm)
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –ö–Ω–æ–ø–∫–∞ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º <code>{promo_code}</code> –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞.\n\n"
        "<b>–®–∞–≥ 4/4:</b> –¢–µ–ø–µ—Ä—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É.",
        reply_markup=confirm_broadcast_keyboard()
    )


# --- –®–∞–≥ 4: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ ---
@admin_broadcast_router.callback_query(F.data == "broadcast_start", BroadcastFSM.confirm)
async def confirm_and_run_broadcast(call: CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    logger.debug(f"Broadcast confirmed by admin {call.from_user.id}. Final data: {data}")
    
    msg_chat_id = data.get("message_to_send_chat_id")
    msg_id = data.get("message_to_send_id")
    audience = data.get("audience")
    promo_code = data.get("promo_code")
    await state.clear()

    if not (msg_chat_id and msg_id and audience):
        logger.error(f"Broadcast failed for admin {call.from_user.id}: data was lost. State data: {data}")
        await call.message.edit_text("‚ùå <b>–û—à–∏–±–∫–∞:</b> –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –±—ã–ª–∏ —É—Ç–µ—Ä—è–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ê–£–î–ò–¢–û–†–ò–ò –° –õ–û–ì–ò–†–û–í–ê–ù–ò–ï–ú ---
    users_ids = []
    audience_text = ""
    logger.debug(f"Fetching audience '{audience}' from DB...")
    if audience == "all":
        users_ids = db.get_all_users_ids()
        audience_text = "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    elif audience == "never":
        users_ids = db.get_users_without_first_payment()
        audience_text = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –Ω–µ —Å–æ–≤–µ—Ä—à–∞–≤—à–∏–º –ø–æ–∫—É–ø–∫—É"
    
    # --- –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ò–ó –ë–î ---
    logger.debug(f"DB returned {len(users_ids)} user(s) for audience '{audience}'. User IDs: {users_ids[:20]}...") # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 ID
    if not users_ids:
        await call.message.edit_text("‚ö†Ô∏è –ê—É–¥–∏—Ç–æ—Ä–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—É—Å—Ç–∞. –ù–∏–∫–æ–º—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=admin_main_menu_keyboard())
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
    reply_markup = None
    if promo_code:
        promo_kb = InlineKeyboardBuilder()
        promo_kb.button(text=f"üéÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ {promo_code}", callback_data=f"apply_promo_{promo_code}")
        reply_markup = promo_kb.as_markup()
    
    await call.message.edit_text(f"üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è <b>{len(users_ids)}</b> {audience_text} –∑–∞–ø—É—â–µ–Ω–∞...")

    # --- –ü—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ ---
    success_count = 0
    errors_count = 0
    for user_id in users_ids:
        try:
            await bot.copy_message(
                chat_id=user_id,
                from_chat_id=msg_chat_id,
                message_id=msg_id,
                reply_markup=reply_markup
            )
            success_count += 1
            await asyncio.sleep(0.03) # 33 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥—É - –±–µ–∑–æ–ø–∞—Å–Ω–æ
        except Exception as e:
            errors_count += 1
            logger.warning(f"Broadcast failed for user {user_id}. Error: {e}")
            
    await call.bot.send_message(
        chat_id=call.from_user.id,
        text=f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\nüëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{success_count}</b>\nüëé –û—à–∏–±–æ–∫: <b>{errors_count}</b>"
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã FSM ---
@admin_broadcast_router.callback_query(F.data == "admin_broadcast", BroadcastFSM.get_message)
@admin_broadcast_router.callback_query(F.data == "admin_main_menu")
async def cancel_broadcast_handler(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=admin_main_menu_keyboard())