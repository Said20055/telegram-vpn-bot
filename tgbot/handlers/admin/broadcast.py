# tgbot/handlers/admin/broadcast.py

import asyncio
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from loader import logger

# --- –§–∏–ª—å—Ç—Ä—ã, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –ë–î ---
from tgbot.filters.admin import IsAdmin
from database import requests as db
from tgbot.keyboards.inline import confirm_broadcast_keyboard, cancel_fsm_keyboard, admin_main_menu_keyboard

admin_broadcast_router = Router()
admin_broadcast_router.message.filter(IsAdmin())
admin_broadcast_router.callback_query.filter(IsAdmin())


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ---
class BroadcastFSM(StatesGroup):
    get_message = State()
    confirm = State()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –≤–Ω—É—Ç—Ä–∏ FSM ---
@admin_broadcast_router.callback_query(F.data == "admin_main_menu", BroadcastFSM.get_message)
@admin_broadcast_router.callback_query(F.data == "admin_main_menu", BroadcastFSM.confirm)
async def cancel_broadcast_handler(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=admin_main_menu_keyboard())


# --- –ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ ---
@admin_broadcast_router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(call: CallbackQuery, state: FSMContext):
    """–®–∞–≥ 1: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await call.message.edit_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.",
        reply_markup=cancel_fsm_keyboard("admin_main_menu")
    )
    await state.set_state(BroadcastFSM.get_message)


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
@admin_broadcast_router.message(BroadcastFSM.get_message)
async def get_broadcast_message(message: Message, state: FSMContext):
    """–®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –µ–≥–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
    # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∫–Ω–æ–ø–∫–∏ –∏ —Ç.–¥.
    await state.update_data(message_to_send=message)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞"
    await message.answer(
        "–í–æ—Ç —Ç–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?",
        reply_markup=confirm_broadcast_keyboard()
    )
    await state.set_state(BroadcastFSM.confirm)


# --- –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
@admin_broadcast_router.callback_query(F.data == "broadcast_start", BroadcastFSM.confirm)
async def confirm_and_run_broadcast(call: CallbackQuery, state: FSMContext, bot: Bot):
    """–®–∞–≥ 3: –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏."""
    data = await state.get_data()
    message_to_send: Message = data.get("message_to_send")
    await state.clear()

    if not message_to_send:
        await call.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞:</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=admin_main_menu_keyboard(),
            parse_mode="HTML"
        )
        return

    users_ids = db.get_all_users_ids()
    total_users = len(users_ids)
    
    await call.message.edit_text(
        f"üöÄ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <b>{total_users}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º. "
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏.",
        reply_markup=None,
        parse_mode="HTML"
    )

    # --- –°–∞–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏ ---
    success_count = 0
    errors_count = 0
    
    for user_id in users_ids:
        try:
            await message_to_send.copy_to(chat_id=user_id)
            success_count += 1
            await asyncio.sleep(0.025)
        except Exception as e:
            errors_count += 1
            logger.warning(f"Broadcast failed for user {user_id}. Error: {e}")
            
    # --- –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É ---
    await call.bot.send_message(
        chat_id=call.from_user.id,
        text=(
            f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üëç –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{success_count}</b>\n"
            f"üëé –û—à–∏–±–æ–∫: <b>{errors_count}</b>"
        ),
    )
