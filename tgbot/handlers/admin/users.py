# tgbot/handlers/admin/users.py (–ü–æ–ª–Ω–∞—è, —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è)

import asyncio
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from loader import logger

# --- –§–∏–ª—å—Ç—Ä—ã –∏ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
from tgbot.filters.admin import IsAdmin
from tgbot.keyboards.inline import user_manage_keyboard, confirm_delete_keyboard, back_to_main_menu_keyboard, back_to_admin_main_menu_keyboard

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ API ---
from database import requests as db
from marzban.init_client import MarzClientCache


admin_users_router = Router()
# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∞–¥–º–∏–Ω–∞ –∫–æ –≤—Å–µ–º —Ö–µ–Ω–¥–ª–µ—Ä–∞–º –≤ —ç—Ç–æ–º —Ä–æ—É—Ç–µ—Ä–µ
admin_users_router.message.filter(IsAdmin())
admin_users_router.callback_query.filter(IsAdmin())


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class AdminFSM(StatesGroup):
    find_user = State()
    add_days_user_id = State()
    add_days_amount = State()


# =============================================================================
# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
# =============================================================================

async def show_user_card(message_or_call, user_id: int):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    –í—ã–Ω–µ—Å–µ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
    """
    user = db.get_user(user_id)
    if not user:
        text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        reply_markup = back_to_main_menu_keyboard()
    else:
        sub_end_str = user.subscription_end_date.strftime('%d.%m.%Y %H:%M') if user.subscription_end_date else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        text = (
            f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:</b>\n\n"
            f"<b>ID:</b> <code>{user.user_id}</code>\n"
            f"<b>Username:</b> @{user.username or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"<b>–ò–º—è:</b> {user.full_name}\n\n"
            f"<b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:</b> {sub_end_str}\n"
            f"<b>Marzban –∞–∫–∫–∞—É–Ω—Ç:</b> <code>{user.marzban_username or '–ù–µ —Å–æ–∑–¥–∞–Ω'}</code>"
        )
        reply_markup = user_manage_keyboard(user.user_id)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å - –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
    if isinstance(message_or_call, CallbackQuery):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º try-except –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        try:
            await message_or_call.message.edit_text(text, reply_markup=reply_markup)
        except:
            await message_or_call.bot.send_message(message_or_call.from_user.id, text, reply_markup=reply_markup)
    else:  # –µ—Å–ª–∏ —ç—Ç–æ Message
        await message_or_call.answer(text, reply_markup=reply_markup)


# =============================================================================
# --- –û–°–ù–û–í–ù–´–ï –•–ï–ù–î–õ–ï–†–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ---
# =============================================================================

@admin_users_router.callback_query(F.data == "admin_users_menu")
async def users_menu(call: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await state.clear()
    await call.message.edit_text(
        "<b>üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ username (–±–µ–∑ @) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=back_to_admin_main_menu_keyboard()
    )
    await state.set_state(AdminFSM.find_user)


@admin_users_router.message(AdminFSM.find_user)
async def find_user(message: Message, state: FSMContext):
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ –∫–∞—Ä—Ç–æ—á–∫—É."""
    await state.clear()
    query = message.text.strip()
    user = None

    if query.isdigit():
        user = db.get_user(int(query))
    else:
        user = db.get_user_by_username(query.replace("@", ""))
    
    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –∏–ª–∏ username –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.\n\n"
                             "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        await state.set_state(AdminFSM.find_user)
        return
        
    await show_user_card(message, user.user_id)


# --- –ë–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–π ---

@admin_users_router.callback_query(F.data.startswith("admin_add_days_"))
async def add_days_start(call: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏."""
    user_id = int(call.data.split("_")[3])
    await state.update_data(user_id=user_id)
    
    await call.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>:")
    await state.set_state(AdminFSM.add_days_amount)


@admin_users_router.message(AdminFSM.add_days_amount)
async def add_days_finish(message: Message, state: FSMContext, marzban: MarzClientCache, bot: Bot):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.
    –ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    
    # --- 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
    try:
        days_to_add = int(message.text)
        if days_to_add <= 0:
            await message.answer("‚ùå <b>–û—à–∏–±–∫–∞:</b> –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
    except (ValueError, TypeError):
        await message.answer("‚ùå <b>–û—à–∏–±–∫–∞:</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    # --- 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ---
    data = await state.get_data()
    user_id = data.get("user_id")
    await state.clear()
    
    await message.answer(f"‚è≥ –ü—Ä–æ–¥–ª–µ–≤–∞—é/—Å–æ–∑–¥–∞—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> –Ω–∞ <b>{days_to_add}</b> –¥–Ω...")

    user = db.get_user(user_id)
    if not user:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code> –≤ –±–∞–∑–µ.")
        return
        
    # --- 3. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Marzban –∏ –Ω–∞—à–µ–π –ë–î ---
    marzban_username = (user.marzban_username or f"user_{user_id}").lower()

    try:
        # –í—ã–∑—ã–≤–∞–µ–º "—É–º–Ω—ã–π" –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π —Å–∞–º —Ä–µ—à–∞–µ—Ç, —Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å.
        await marzban.modify_user(username=marzban_username, expire_days=days_to_add)
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ marzban_username, –∑–Ω–∞—á–∏—Ç, –º—ã –µ–≥–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–ª–∏.
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –≤ –Ω–∞—à—É –ë–î.
        if not user.marzban_username:
            db.update_user_marzban_username(user_id, marzban_username)
            logger.info(f"Admin CREATED and subscribed Marzban user '{marzban_username}' for {days_to_add} days.")
        else:
            logger.info(f"Admin EXTENDED subscription for Marzban user '{marzban_username}' by {days_to_add} days.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –Ω–∞—à–µ–π –ë–î.
        db.extend_user_subscription(user_id, days=days_to_add)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞.
        updated_user = db.get_user(user_id)
        new_sub_end_date = updated_user.subscription_end_date.strftime('%d.%m.%Y')
        
        # --- 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã –æ–± —É—Å–ø–µ—Ö–µ ---
        
        # –û—Ç—á–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await message.answer(
            f"‚úÖ <b>–£—Å–ø–µ—à–Ω–æ!</b>\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code> –¥–æ–±–∞–≤–ª–µ–Ω–æ <b>{days_to_add}</b> –¥–Ω.\n"
            f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: <b>{new_sub_end_date}</b>"
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                chat_id=user_id,
                text=f"üéâ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–¥–ª–∏–ª –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ <b>{days_to_add}</b> –¥–Ω.!\n"
                     f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{new_sub_end_date}</b>"
            )
        except Exception as e:
            logger.warning(f"Could not send notification to user {user_id} about subscription extension: {e}")
            await message.answer("‚ùóÔ∏è–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞).")

    except Exception as e:
        logger.error(f"Admin failed to add days for user {user_id}: {e}", exc_info=True)
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å Marzban –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    
    # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ (—É—Å–ø–µ—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—É –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    await show_user_card(message, user_id)

# --- –ë–ª–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---

@admin_users_router.callback_query(F.data.startswith("admin_delete_user_"))
async def delete_user_confirm(call: CallbackQuery):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ."""
    user_id = int(call.data.split("_")[3])
    await call.message.edit_text(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>?\n\n"
        "<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ Marzban –∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.",
        reply_markup=confirm_delete_keyboard(user_id)
    )

@admin_users_router.callback_query(F.data.startswith("admin_confirm_delete_user_"))
async def delete_user_finish(call: CallbackQuery, marzban: MarzClientCache):
    await call.answer("–£–¥–∞–ª—è—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    try:
        user_id = int(call.data.split("_")[4])
        user = db.get_user(user_id)
        # ... (–ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ user) ...
        
        marzban_deletion_success = False
        if user.marzban_username:
            logger.info(f"Admin attempt 1 to delete '{user.marzban_username}' from Marzban")
            # –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
            success_attempt_1 = await marzban.delete_user(user.marzban_username)
            
            if success_attempt_1:
                marzban_deletion_success = True
            else:
                # –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞, –∂–¥–µ–º —Å–µ–∫—É–Ω–¥—É –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                logger.warning(f"First attempt to delete '{user.marzban_username}' failed. Retrying in 1 second...")
                await asyncio.sleep(1) 
                # –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞
                marzban_deletion_success = await marzban.delete_user(user.marzban_username)
        else:
            marzban_deletion_success = True # –ï—Å–ª–∏ –≤ Marzban –∏ –Ω–µ –±—ã–ª–æ, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º

        if marzban_deletion_success:
            db.delete_user(user.user_id)
            await call.message.edit_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_id}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        else:
            await call.message.edit_text(f"‚ùå **–û—à–∏–±–∫–∞!**\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Marzban –¥–∞–∂–µ —Å–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ø—ã—Ç–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Marzban.")

    except Exception as e:
        logger.error(f"Unexpected error in delete_user_finish for user_id from call {call.data}: {e}", exc_info=True)
        await call.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è.")

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ä—Ç–æ—á–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
@admin_users_router.callback_query(F.data.startswith("admin_show_user_"))
async def show_user_handler(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω—É–∂–Ω–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞' –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏)."""
    user_id = int(call.data.split("_")[3])
    await show_user_card(call, user_id)