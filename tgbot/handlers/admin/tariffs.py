from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from loader import logger

from tgbot.filters.admin import IsAdmin
from database import requests as db
from tgbot.keyboards.inline import (tariffs_list_keyboard, single_tariff_manage_keyboard, 
                                    confirm_delete_tariff_keyboard, cancel_fsm_keyboard)

admin_tariffs_router = Router()
admin_tariffs_router.message.filter(IsAdmin())
admin_tariffs_router.callback_query.filter(IsAdmin())


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ ---
class TariffFSM(StatesGroup):
    add_name = State()
    add_price = State()
    add_duration = State()
    edit_field = State()


# --- –•–µ–ª–ø–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–∞—Ä–∏—Ñ–∞ ---
async def show_tariff_card(call: CallbackQuery, tariff_id: int):
    tariff = await db.get_tariff_by_id(tariff_id)
    if not tariff:
        await call.message.edit_text("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    status = "–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ" if tariff.is_active else "–û—Ç–∫–ª—é—á–µ–Ω ‚ùå"
    text = (
        f"<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–º:</b> ¬´{tariff.name}¬ª\n\n"
        f"<b>ID:</b> <code>{tariff.id}</code>\n"
        f"<b>–¶–µ–Ω–∞:</b> {tariff.price} RUB\n"
        f"<b>–°—Ä–æ–∫:</b> {tariff.duration_days} –¥–Ω.\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}"
    )
    await call.message.edit_text(text, reply_markup=single_tariff_manage_keyboard(tariff.id, tariff.is_active))


# --- –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞–º–∏ ---
@admin_tariffs_router.callback_query(F.data == "admin_tariffs_menu")
async def tariffs_menu(call: CallbackQuery):
    tariffs = await db.get_all_tariffs()
    await call.message.edit_text(
        "<b>üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π.",
        reply_markup=tariffs_list_keyboard(list(tariffs))
    )

# --- –ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ ---
@admin_tariffs_router.callback_query(F.data.startswith("admin_manage_tariff_"))
async def manage_single_tariff(call: CallbackQuery):
    tariff_id = int(call.data.split("_")[3])
    await show_tariff_card(call, tariff_id)


# --- –í–∫–ª—é—á–µ–Ω–∏–µ / –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ ---
@admin_tariffs_router.callback_query(F.data.startswith("admin_toggle_tariff_"))
async def toggle_tariff_status(call: CallbackQuery):
    tariff_id = int(call.data.split("_")[3])
    tariff = await db.get_tariff_by_id(tariff_id)
    if tariff:
        new_status = not tariff.is_active
        await db.update_tariff_field(tariff_id, 'is_active', new_status)
        await call.answer(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {'–ê–∫—Ç–∏–≤–µ–Ω' if new_status else '–û—Ç–∫–ª—é—á–µ–Ω'}")
        await show_tariff_card(call, tariff_id)


# --- –ë–ª–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ ---
@admin_tariffs_router.callback_query(F.data.startswith("admin_delete_tariff_"))
async def delete_tariff_confirm(call: CallbackQuery):
    tariff_id = int(call.data.split("_")[3])
    await call.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.",
        reply_markup=confirm_delete_tariff_keyboard(tariff_id)
    )

@admin_tariffs_router.callback_query(F.data.startswith("admin_confirm_delete_tariff_"))
async def delete_tariff_finish(call: CallbackQuery):
    tariff_id = int(call.data.split("_")[4])
    await db.delete_tariff_by_id(tariff_id)
    await call.answer("–¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", show_alert=True)
    await tariffs_menu(call) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–∞—Ä–∏—Ñ–æ–≤


# --- –ë–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ (FSM) ---
@admin_tariffs_router.callback_query(F.data == "admin_add_tariff")
async def add_tariff_start(call: CallbackQuery, state: FSMContext):
    await state.set_state(TariffFSM.add_name)
    await call.message.edit_text("<b>–®–∞–≥ 1/3:</b> –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü—Ä–æ–º–æ-—Ç–∞—Ä–∏—Ñ –Ω–∞ –Ω–µ–¥–µ–ª—é').", 
                                reply_markup=cancel_fsm_keyboard("admin_tariffs_menu"))

@admin_tariffs_router.message(TariffFSM.add_name)
async def add_tariff_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(TariffFSM.add_price)
    await message.answer("<b>–®–∞–≥ 2/3:</b> –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–∞—Ä–∏—Ñ–∞ –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 99 –∏–ª–∏ 99.9).")

@admin_tariffs_router.message(TariffFSM.add_price)
async def add_tariff_price(message: Message, state: FSMContext):
    try:
        price = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ü–µ–Ω—ã.")
        return
    await state.update_data(price=price)
    await state.set_state(TariffFSM.add_duration)
    await message.answer("<b>–®–∞–≥ 3/3:</b> –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–∞ –≤ –¥–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7 –∏–ª–∏ 30).")

@admin_tariffs_router.message(TariffFSM.add_duration)
async def add_tariff_duration(message: Message, state: FSMContext):
    try:
        duration = int(message.text)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π.")
        return
    
    data = await state.get_data()
    new_tariff = await db.add_new_tariff(
        name=data['name'],
        price=data['price'],
        duration_days=duration
    )
    await state.clear()
    await message.answer(f"‚úÖ –ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ ¬´{new_tariff.name}¬ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    


# --- –ë–ª–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ (FSM) ---
# –û–±—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_tariffs_router.callback_query(F.data.startswith("admin_edit_tariff_"))
async def edit_tariff_start(call: CallbackQuery, state: FSMContext):
    parts = call.data.split("_")
    field_to_edit = parts[3]
    tariff_id = int(parts[4])
    
    field_map = {
        "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
        "price": "—Ü–µ–Ω—É (—á–∏—Å–ª–æ)",
        "duration": "—Å—Ä–æ–∫ –≤ –¥–Ω—è—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)"
    }
    prompt_text = f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_map[field_to_edit]} –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ <code>{tariff_id}</code>"
    
    await state.set_state(TariffFSM.edit_field)
    await state.update_data(tariff_id=tariff_id, field_to_edit=field_to_edit)
    await call.message.edit_text(prompt_text, reply_markup=cancel_fsm_keyboard(f"admin_manage_tariff_{tariff_id}"))

@admin_tariffs_router.message(TariffFSM.edit_field)
async def edit_tariff_finish(message: Message, state: FSMContext):
    data = await state.get_data()
    tariff_id = data['tariff_id']
    field = data['field_to_edit']
    new_value = message.text

    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    try:
        if field == 'price':
            new_value = float(new_value.replace(",", "."))
        elif field == 'duration':
            new_value = int(new_value)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await db.update_tariff_field(tariff_id, field, new_value)
    await state.clear()
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")