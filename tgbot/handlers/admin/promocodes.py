# tgbot/handlers/admin/promocodes.py

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from datetime import datetime, timedelta

from loader import logger
from database import requests as db
from tgbot.keyboards.inline import (promo_codes_list_keyboard, promo_type_keyboard, 
                                    cancel_fsm_keyboard, back_to_promo_list_keyboard) # –ù—É–∂–Ω—ã –Ω–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

admin_promo_router = Router()

class PromoFSM(StatesGroup):
    get_code = State()
    get_type = State()
    get_value = State()
    get_max_uses = State()

async def show_promo_codes_list(event: types.Message | types.CallbackQuery):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.
    –†–∞–±–æ—Ç–∞–µ—Ç –∏ —Å Message, –∏ —Å CallbackQuery.
    """
    codes = db.get_all_promo_codes()
    text = "üéÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>"
    reply_markup = promo_codes_list_keyboard(list(codes))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(event, types.CallbackQuery):
        try:
            await event.message.edit_text(text, reply_markup=reply_markup)
        except: # –ï—Å–ª–∏ –Ω–µ –≤—ã—à–ª–æ, —É–¥–∞–ª—è–µ–º –∏ —à–ª–µ–º –Ω–æ–≤–æ–µ
            await event.message.delete()
            await event.message.answer(text, reply_markup=reply_markup)
    else: # –µ—Å–ª–∏ —ç—Ç–æ Message
        await event.answer(text, reply_markup=reply_markup)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ ---
@admin_promo_router.callback_query(F.data == "admin_promo_codes")
async def promo_codes_menu_callback(call: CallbackQuery):
    """–°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É '–ö —Å–ø–∏—Å–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤'."""
    await call.answer()
    await show_promo_codes_list(call)

# --- –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ---
@admin_promo_router.callback_query(F.data.startswith("admin_delete_promo_"))
async def delete_promo(call: CallbackQuery):
    promo_id = int(call.data.split("_")[3])
    db.delete_promo_code(promo_id)
    await call.answer("–ü—Ä–æ–º–æ–∫–æ–¥ —É–¥–∞–ª–µ–Ω", show_alert=True)
    await show_promo_codes_list(call)


# --- FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ ---
@admin_promo_router.callback_query(F.data == "admin_add_promo")
async def add_promo_start(call: CallbackQuery, state: FSMContext):
    await state.set_state(PromoFSM.get_code)
    await call.message.edit_text(
        "<b>–®–∞–≥ 1/4:</b> –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>SUMMER2025</code>). –û–Ω –±—É–¥–µ—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É.",
        reply_markup=cancel_fsm_keyboard("admin_promo_codes")
    )

@admin_promo_router.message(PromoFSM.get_code)
async def add_promo_code(message: Message, state: FSMContext):
    if db.get_promo_code(message.text):
        await message.answer("–¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
        return
    await state.update_data(code=message.text)
    await state.set_state(PromoFSM.get_type)
    await message.answer("<b>–®–∞–≥ 2/4:</b> –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=promo_type_keyboard())

@admin_promo_router.callback_query(F.data.startswith("promo_type_"), PromoFSM.get_type)
async def add_promo_type(call: CallbackQuery, state: FSMContext):
    promo_type = call.data.split("_")[2]
    await state.update_data(type=promo_type)
    await state.set_state(PromoFSM.get_value)
    
    if promo_type == "days":
        await call.message.edit_text("<b>–®–∞–≥ 3/4:</b> –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
    elif promo_type == "discount":
        await call.message.edit_text("<b>–®–∞–≥ 3/4:</b> –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 99).")

@admin_promo_router.message(PromoFSM.get_value)
async def add_promo_value(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(value=int(message.text))
    await state.set_state(PromoFSM.get_max_uses)
    await message.answer("<b>–®–∞–≥ 4/4:</b> –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")

@admin_promo_router.message(PromoFSM.get_max_uses)
async def add_promo_max_uses(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return
    
    data = await state.get_data()
    promo_type = data['type']
    
    db.create_promo_code(
        code=data['code'],
        bonus_days=data['value'] if promo_type == 'days' else 0,
        discount_percent=data['value'] if promo_type == 'discount' else 0,
        max_uses=int(message.text)
    )
    await state.clear()
    await message.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    fake_call = CallbackQuery(id="fake_call", from_user=message.from_user, chat_instance="", message=message)
    await show_promo_codes_list(fake_call)