# tgbot/handlers/webhook_handlers.py (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è, –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è)

import logging
from aiohttp import web
from aiogram import Bot

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Å–µ—Ä–≤–∏—Å—ã –∏ —É—Ç–∏–ª–∏—Ç—ã
from tgbot.services import payment
from database import requests as db
from marzban.init_client import MarzClientCache # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Marzban –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤

logger = logging.getLogger(__name__)


async def yookassa_webhook_handler(request: web.Request):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –æ—Ç YooKassa,
    —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –≤ –ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ Marzban.
    """
    try:
        request_body = await request.json()
        notification = payment.parse_webhook_notification(request_body)

        if notification is None:
            logger.warning("Received invalid webhook notification from YooKassa.")
            return web.Response(status=400)

        if notification.event == 'payment.succeeded':
            paid_payment = notification.object
            metadata = paid_payment.metadata
            
            try:
                user_id = int(metadata['user_id'])
                tariff_id = int(metadata['tariff_id'])
            except (KeyError, ValueError) as e:
                logger.error(f"Invalid metadata in webhook: {metadata}. Error: {e}")
                return web.Response(status=400)

            tariff = db.get_tariff_by_id(tariff_id)
            if not tariff:
                logger.error(f"Received payment for non-existent tariff_id: {tariff_id} from user {user_id}")
                return web.Response(status=400)

            logger.info(f"Received successful payment for user {user_id} on tariff '{tariff.name}'.")

            # --- –û–°–ù–û–í–ù–ê–Ø –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê ---

            # 1. –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ù–ê–®–ï–ô –ë–î
            subscription_days = tariff.duration_days
            db.extend_user_subscription(user_id, days=subscription_days)
            logger.info(f"Subscription for user {user_id} in local DB extended by {subscription_days} days.")
            
            # 2. –£–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ MARZBAN
            marzban: MarzClientCache = request.app['marzban']
            user = db.get_user(user_id)
            
            if not user.marzban_username:
                # –°—Ü–µ–Ω–∞—Ä–∏–π: –ü–µ—Ä–≤–∞—è –æ–ø–ª–∞—Ç–∞ -> –°–û–ó–î–ê–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban
                marzban_username = f"user_{user_id}"
                try:
                    await marzban.add_user(username=marzban_username, expire_days=subscription_days)
                    db.update_user_marzban_username(user_id, marzban_username)
                    logger.info(f"Successfully created Marzban user '{marzban_username}' for user_id {user_id}")
                except Exception as e:
                    logger.error(f"CRITICAL: Failed to create Marzban user for {user_id} after payment: {e}")
                    # –ó–¥–µ—Å—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –ø—Ä–æ–±–ª–µ–º–µ!
                    bot: Bot = request.app['bot']
                    admin_id = request.app['config'].tg_bot.admin_id
                    await bot.send_message(admin_id, f"‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ‚ö†Ô∏è\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Marzban –¥–ª—è user_id `{user_id}` –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏!")

            else:
                # –°—Ü–µ–Ω–∞—Ä–∏–π: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–ø–ª–∞—Ç–∞ -> –ü–†–û–î–õ–ï–í–ê–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban
                try:
                    await marzban.modify_user(username=user.marzban_username, expire_days=subscription_days)
                    logger.info(f"Successfully modified Marzban user '{user.marzban_username}', extended subscription.")
                except Exception as e:
                    logger.error(f"CRITICAL: Failed to modify Marzban user {user.marzban_username} after payment: {e}")
                    # –ó–¥–µ—Å—å —Ç–æ–∂–µ –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    bot: Bot = request.app['bot']
                    admin_id = request.app['config'].tg_bot.admin_id
                    await bot.send_message(admin_id, f"‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ‚ö†Ô∏è\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ Marzban –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{user.marzban_username}` (user_id: `{user_id}`) –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏!")

            # 3. –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –æ–ø–ª–∞—Ç–∞
            if user and user.referrer_id and not user.is_first_payment_made:
                bonus_days = 7  # –ë–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥)
                db.add_bonus_days(user.referrer_id, days=bonus_days)
                db.set_first_payment_done(user_id) # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è –æ–ø–ª–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞
                logger.info(f"Referral bonus of {bonus_days} days awarded to user {user.referrer_id}.")
                
                try:
                    bot: Bot = request.app['bot']
                    await bot.send_message(
                        user.referrer_id,
                        f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ **{bonus_days} –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π**."
                    )
                except Exception as e:
                    logger.error(f"Could not send bonus notification to referrer {user.referrer_id}: {e}")

            # 4. –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—Ö–µ
            try:
                bot: Bot = request.app['bot']
                await bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à —Ç–∞—Ä–∏—Ñ '{tariff.name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {subscription_days} –¥–Ω–µ–π.")
            except Exception as e:
                logger.error(f"Could not send payment success notification to user {user_id}: {e}")

        # –û—Ç–≤–µ—á–∞–µ–º YooKassa, —á—Ç–æ –≤—Å–µ –ø–æ–ª—É—á–∏–ª–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
        return web.Response(status=200)

    except Exception as e:
        logger.error(f"FATAL: Unhandled error in yookassa_webhook_handler: {e}", exc_info=True)
        return web.Response(status=500)