# tgbot/handlers/webhook_handlers.py (—Å —Ä–µ–∞–ª—å–Ω—ã–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –±–æ–Ω—É—Å–æ–≤)
import httpx
from aiohttp import web
from aiogram import Bot

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Å–µ—Ä–≤–∏—Å—ã –∏ —É—Ç–∏–ª–∏—Ç—ã
from tgbot.services import payment
from database import requests as db
from marzban.init_client import MarzClientCache
from loader import logger


async def yookassa_webhook_handler(request: web.Request):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –æ—Ç YooKassa.
    –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–∞—è –ª–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Marzban
    –∏ —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤.
    """
    try:
        request_body = await request.json()
        notification = payment.parse_webhook_notification(request_body)

        if notification is None:
            logger.warning("Received invalid webhook notification from YooKassa.")
            return web.Response(status=400)

        if notification.event == 'payment.succeeded':
            # --- –ë–ª–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
            paid_payment = notification.object
            metadata = paid_payment.metadata
            try:
                user_id = int(metadata['user_id'])
                tariff_id = int(metadata['tariff_id'])
            except (KeyError, ValueError) as e:
                logger.error(f"Invalid metadata in webhook: {metadata}. Error: {e}")
                return web.Response(status=400)

            tariff = db.get_tariff_by_id(tariff_id)
            if not tariff:
                logger.error(f"Received payment for non-existent tariff_id: {tariff_id} from user {user_id}")
                return web.Response(status=400)

            logger.info(f"Received successful payment for user {user_id} on tariff '{tariff.name}'.")

            # --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–ª–∞—Ç–∏–ª (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
            subscription_days = tariff.duration_days
            db.extend_user_subscription(user_id, days=subscription_days)
            logger.info(f"Subscription for user {user_id} in local DB extended by {subscription_days} days.")

            marzban: MarzClientCache = request.app['marzban']
            user_from_db = db.get_user(user_id)
            marzban_username = (user_from_db.marzban_username or f"user_{user_id}").lower()

            try:
                # ... (–≤—Å—è –≤–∞—à–∞ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–∞—è –ª–æ–≥–∏–∫–∞ add/modify user —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π 409 –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –∑–¥–µ—Å—å)
                if user_from_db.marzban_username:
                    await marzban.modify_user(username=marzban_username, expire_days=subscription_days)
                else:
                    await marzban.add_user(username=marzban_username, expire_days=subscription_days)
                    db.update_user_marzban_username(user_id, marzban_username)

            except httpx.HTTPStatusError as e:
                if e.response.status_code == 409:
                    logger.warning(f"Marzban user '{marzban_username}' already exists. Modifying and fixing DB.")
                    await marzban.modify_user(username=marzban_username, expire_days=subscription_days)
                    if not user_from_db.marzban_username:
                        db.update_user_marzban_username(user_id, marzban_username)
                else:
                    logger.error(f"CRITICAL: HTTP error for {marzban_username}: {e}", exc_info=True)
            except Exception as e:
                logger.error(f"CRITICAL: Generic error for {marzban_username}: {e}", exc_info=True)


            # =================================================================
            # === –ù–ê–ß–ê–õ–û –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –ë–û–ù–£–°–û–í ===
            # =================================================================

            bot: Bot = request.app['bot'] # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∑–∞—Ä–∞–Ω–µ–µ

            if user_from_db and user_from_db.referrer_id and not user_from_db.is_first_payment_made:
                bonus_days = 7
                referrer = db.get_user(user_from_db.referrer_id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
                if referrer and referrer.marzban_username:
                    try:
                        # 1. –†–µ–∞–ª—å–Ω–æ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ Marzban
                        await marzban.modify_user(username=referrer.marzban_username, expire_days=bonus_days)
                        # 2. –†–µ–∞–ª—å–Ω–æ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –Ω–∞—à–µ–π –ë–î
                        db.extend_user_subscription(referrer.user_id, days=bonus_days)

                        logger.info(f"Referral bonus: Extended subscription for referrer {referrer.user_id} by {bonus_days} days.")

                        # 3. –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ–± —É—Å–ø–µ—Ö–µ
                        await bot.send_message(
                            referrer.user_id,
                            f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{bonus_days} –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π</b> –ø–æ–¥–ø–∏—Å–∫–∏."
                        )
                    except Exception as e:
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å, –Ω–∞—á–∏—Å–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –¥–Ω–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º
                        logger.error(f"Failed to apply referral bonus to user {referrer.user_id}: {e}")
                        db.add_bonus_days(referrer.user_id, days=bonus_days)
                        await bot.send_message(
                            referrer.user_id,
                            f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{bonus_days} –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π</b>. –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç–µ."
                        )
                else:
                    # –ï—Å–ª–∏ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –≤–æ–æ–±—â–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏, –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∏—Å–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –¥–Ω–∏
                    if referrer:
                        db.add_bonus_days(referrer.user_id, days=bonus_days)
                        logger.info(f"Referral bonus: Added {bonus_days} virtual bonus days to user {referrer.user_id}.")
                        try:
                            await bot.send_message(
                                referrer.user_id,
                                f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{bonus_days} –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π</b>."
                            )
                        except Exception:
                            pass

                # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è –æ–ø–ª–∞—Ç–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞
                db.set_first_payment_done(user_id)

            # =================================================================
            # === –ö–û–ù–ï–¶ –û–ë–ù–û–í–õ–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê ===
            # =================================================================

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ–ø–ª–∞—Ç–∏–ª
            try:
                await bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à —Ç–∞—Ä–∏—Ñ '<b>{tariff.name}</b>' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ <b>{subscription_days} –¥–Ω–µ–π</b>.")
            except Exception as e:
                logger.error(f"Could not send payment success notification to user {user_id}: {e}")

        return web.Response(status=200)

    except Exception as e:
        logger.error(f"FATAL: Unhandled error in yookassa_webhook_handler: {e}", exc_info=True)
        return web.Response(status=500)

