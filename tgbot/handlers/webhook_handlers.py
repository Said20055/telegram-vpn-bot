# tgbot/handlers/webhook_handlers.py (–û–ø—Ç–∏–º–∏–∑
from datetime import datetime
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiohttp import web
from aiogram import Bot, Dispatcher

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã, –ë–î, –∫–ª–∏–µ–Ω—Ç –∏ –ª–æ–≥–≥–µ—Ä
from tgbot.services import payment
from database import requests as db
from marzban.init_client import MarzClientCache
from loader import logger, config

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
from tgbot.handlers.user.profile import show_profile_logic


# --- 1. –õ–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
async def _handle_user_payment(user_id: int, tariff, marzban: MarzClientCache) -> bool:
    """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –≤ –ë–î –∏ —Å–æ–∑–¥–∞–µ—Ç/–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Marzban."""
    subscription_days = tariff.duration_days
    db.extend_user_subscription(user_id, days=subscription_days)
    logger.info(f"Subscription for user {user_id} in local DB extended by {subscription_days} days.")

    user_from_db = db.get_user(user_id)
    marzban_username = (user_from_db.marzban_username or f"user_{user_id}").lower()
    is_new_user_for_marzban = False
    try:
        if await marzban.get_user(marzban_username):
            await marzban.modify_user(username=marzban_username, expire_days=subscription_days)
        else:
            await marzban.add_user(username=marzban_username, expire_days=subscription_days)
            is_new_user_for_marzban = True
        if not user_from_db.marzban_username:
            db.update_user_marzban_username(user_id, marzban_username)
            
    except Exception as e:
        logger.error(f"CRITICAL: Failed to create/modify Marzban user {marzban_username}: {e}", exc_info=True)
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
    return is_new_user_for_marzban


# --- 2. –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ ---
async def _handle_referral_bonus(user_who_paid_id: int, marzban: MarzClientCache, bot: Bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É."""
    user_who_paid = db.get_user(user_who_paid_id)
    if not (user_who_paid and user_who_paid.referrer_id and not user_who_paid.is_first_payment_made):
        return # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –æ–ø–ª–∞—Ç–∞ - –≤—ã—Ö–æ–¥–∏–º

    bonus_days = 7
    referrer = db.get_user(user_who_paid.referrer_id)
    if not referrer:
        return

    # –ï—Å–ª–∏ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –µ–≥–æ –≤–µ–∑–¥–µ
    if referrer.marzban_username:
        try:
            await marzban.modify_user(username=referrer.marzban_username, expire_days=bonus_days)
            db.extend_user_subscription(referrer.user_id, days=bonus_days)
            db.add_bonus_days(referrer.user_id, days=bonus_days)
            logger.info(f"Referral bonus: Extended subscription for referrer {referrer.user_id} by {bonus_days} days.")
            await bot.send_message(
                referrer.user_id,
                f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{bonus_days} –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π</b> –ø–æ–¥–ø–∏—Å–∫–∏."
            )
        except Exception as e:
            logger.error(f"Failed to apply referral bonus to user {referrer.user_id}: {e}")
            db.add_bonus_days(referrer.user_id, days=bonus_days) # –ù–∞—á–∏—Å–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –¥–Ω–∏
            await bot.send_message(referrer.user_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É, –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.")
    else:
        # –ï—Å–ª–∏ —É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞, –ø—Ä–æ—Å—Ç–æ –¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –¥–Ω–∏
        db.add_bonus_days(referrer.user_id, days=bonus_days)
        logger.info(f"Referral bonus: Added {bonus_days} virtual bonus days to user {referrer.user_id}.")
        try:
            await bot.send_message(referrer.user_id, f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>{bonus_days} –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π</b>.")
        except Exception: pass
            
    db.set_first_payment_done(user_who_paid_id)


# --- 3. –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ–ø–ª–∞—Ç–µ –∏ –ø–æ–∫–∞–∑ –∫–ª—é—á–µ–π ---
async def _notify_user_and_show_keys(user_id: int, tariff, marzban: MarzClientCache, bot: Bot,  request: web.Request):
    """
    –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—Ö–µ, –æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è/—Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å.
    """
    # --- 1. –û—á–∏—Å—Ç–∫–∞ FSM –∏ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–ª–∞—Ç–µ–∂–æ–º ---
    try:
        dp: Dispatcher = request.app['dp'] # –ü–æ–ª—É—á–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä –∏–∑ request.app
        storage = dp.storage              # –ü–æ–ª—É—á–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        storage_key = StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id)
        state = FSMContext(storage=storage, key=storage_key)
        
        fsm_data = await state.get_data()
        payment_message_id = fsm_data.get("payment_message_id")

        # –ï—Å–ª–∏ –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
        if payment_message_id:
            await bot.edit_message_text(
                chat_id=user_id,
                message_id=payment_message_id,
                text="‚úÖ <i>–≠—Ç–æ—Ç —Å—á–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω.</i>",
                reply_markup=None # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
            )
        
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å —Å–∫–∏–¥–∫—É –∏ message_id
        await state.clear()
        
    except Exception as e:
        logger.error(f"Could not clear state or edit payment message for user {user_id}: {e}")


    # --- 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –∏ –ø–æ–∫–∞–∑ –∫–ª—é—á–µ–π (–≤–∞—à –∫–æ–¥) ---
    try:
        await bot.send_message(
            user_id, 
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à —Ç–∞—Ä–∏—Ñ '<b>{tariff.name}</b>' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ <b>{tariff.duration_days} –¥–Ω–µ–π</b>."
        )
        
        # –°–æ–∑–¥–∞–µ–º "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ" —Å–æ–±—ã—Ç–∏–µ Message –¥–ª—è –≤—ã–∑–æ–≤–∞ show_profile_logic
        from aiogram.types import User, Chat, Message
        from datetime import datetime
        fake_user = User(id=user_id, is_bot=False, first_name="N/A")
        fake_chat = Chat(id=user_id, type="private")
        fake_message = Message(message_id=0, date=datetime.now(), chat=fake_chat, from_user=fake_user)
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è, –ø–µ—Ä–µ–¥–∞–≤–∞—è bot –Ø–í–ù–û –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
        await show_profile_logic(fake_message, marzban, bot)
        
    except Exception as e:
        logger.error(f"Could not send payment success notification to user {user_id}: {e}")


# --- 3. –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–∫—É–ø–∫–µ –≤ –≥—Ä—É–ø–ø—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ---

async def _log_transaction(
    bot: Bot, 
    user_id: int, 
    tariff_name: str, 
    tariff_price: float, 
    is_new_user: bool
):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ç–µ–º—É."""
    user = db.get_user(user_id)
    if not user: return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª–∞ –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ
    action_type = "üíé –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞" if is_new_user else "üîÑ –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"
    
    text = (
        f"{action_type}\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <a href='tg://user?id={user.id}'>{user.full_name}</a>\n"
        f"<b>ID:</b> <code>{user.id}</code>\n"
        f"<b>Username:</b> @{user.username or '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"üí≥ <b>–¢–∞—Ä–∏—Ñ:</b> ¬´{tariff_name}¬ª\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {tariff_price} RUB"
    )
    
    try:
        await bot.send_message(
            chat_id=config.tg_bot.support_chat_id,
            message_thread_id=config.tg_bot.transaction_log_topic_id,
            text=text
        )
    except Exception as e:
        logger.error(f"Failed to send transaction log for user {user_id}: {e}")

# --- –ì–õ–ê–í–ù–´–ô –•–ï–ù–î–õ–ï–† –í–ï–ë–•–£–ö–ê ---
async def yookassa_webhook_handler(request: web.Request):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –æ—Ç YooKassa –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.
    """
    try:
        request_body = await request.json()
        notification = payment.parse_webhook_notification(request_body)

        if notification is None or notification.event != 'payment.succeeded':
            return web.Response(status=400)

        metadata = notification.object.metadata
        user_id = int(metadata['user_id'])
        tariff_id = int(metadata['tariff_id'])
        tariff = db.get_tariff_by_id(tariff_id)

        if not tariff:
            logger.error(f"Webhook for non-existent tariff_id: {tariff_id}")
            return web.Response(status=400)
            
        logger.info(f"Webhook: Processing successful payment for user {user_id}, tariff '{tariff.name}'.")

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞ Marzban –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        bot: Bot = request.app['bot']
        marzban: MarzClientCache = request.app['marzban']
         
        # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        is_new = await _handle_user_payment(user_id, tariff, marzban)
        await _handle_referral_bonus(user_id, marzban, bot)
        await _log_transaction(
        bot=bot,
        user_id=user_id,
        tariff_name=tariff.name,
        tariff_price=tariff.price,
        is_new_user=is_new
    )
        await _notify_user_and_show_keys(user_id, tariff, marzban, bot, request)

        return web.Response(status=200)

    except Exception as e:
        logger.error(f"FATAL: Unhandled error in yookassa_webhook_handler: {e}", exc_info=True)
        return web.Response(status=500)