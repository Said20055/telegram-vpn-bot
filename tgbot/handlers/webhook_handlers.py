# tgbot/handlers/webhook_handlers.py (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —è–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π 409 –æ—à–∏–±–∫–∏)

import logging
import httpx  # <--- –î–û–ë–ê–í–õ–ï–ù –í–ê–ñ–ù–´–ô –ò–ú–ü–û–†–¢
from aiohttp import web
from aiogram import Bot

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Å–µ—Ä–≤–∏—Å—ã –∏ —É—Ç–∏–ª–∏—Ç—ã
from tgbot.services import payment
from database import requests as db
from marzban.init_client import MarzClientCache

logger = logging.getLogger(__name__)


async def yookassa_webhook_handler(request: web.Request):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ–±—Ö—É–∫–∏ –æ—Ç YooKassa.
    –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Marzban
    —Å —è–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ 409 Conflict.
    """
    try:
        request_body = await request.json()
        notification = payment.parse_webhook_notification(request_body)

        if notification is None:
            logger.warning("Received invalid webhook notification from YooKassa.")
            return web.Response(status=400)

        if notification.event == 'payment.succeeded':
            paid_payment = notification.object
            metadata = paid_payment.metadata
            
            try:
                user_id = int(metadata['user_id'])
                tariff_id = int(metadata['tariff_id'])
            except (KeyError, ValueError) as e:
                logger.error(f"Invalid metadata in webhook: {metadata}. Error: {e}")
                return web.Response(status=400)

            tariff = db.get_tariff_by_id(tariff_id)
            if not tariff:
                logger.error(f"Received payment for non-existent tariff_id: {tariff_id} from user {user_id}")
                return web.Response(status=400)

            logger.info(f"Received successful payment for user {user_id} on tariff '{tariff.name}'.")

            # --- –û–°–ù–û–í–ù–ê–Ø –ë–ò–ó–ù–ï–°-–õ–û–ì–ò–ö–ê ---

            # 1. –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –ù–ê–®–ï–ô –ë–î
            subscription_days = tariff.duration_days
            db.extend_user_subscription(user_id, days=subscription_days)
            logger.info(f"Subscription for user {user_id} in local DB extended by {subscription_days} days.")
            
            # 2. –£–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ MARZBAN
            marzban: MarzClientCache = request.app['marzban']
            user_from_db = db.get_user(user_id)
            marzban_username = (user_from_db.marzban_username or f"user_{user_id}").lower()

            try:
                if user_from_db.marzban_username:
                    # –ï—Å–ª–∏ –≤ –Ω–∞—à–µ–π –ë–î –µ—Å—Ç—å –∏–º—è, –º—ã –¢–û–ß–ù–û –∑–Ω–∞–µ–º, —á—Ç–æ —é–∑–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å. –ü–†–û–î–õ–ï–í–ê–ï–ú.
                    logger.info(f"User '{marzban_username}' found in local DB. Modifying...")
                    await marzban.modify_user(username=marzban_username, expire_days=subscription_days)
                    logger.info(f"Successfully modified Marzban user '{marzban_username}'.")
                else:
                    # –ï—Å–ª–∏ –≤ –Ω–∞—à–µ–π –ë–î –∏–º–µ–Ω–∏ –Ω–µ—Ç, –º—ã –ü–´–¢–ê–ï–ú–°–Ø –°–û–ó–î–ê–¢–¨.
                    logger.info(f"User '{marzban_username}' not in local DB. Attempting to create...")
                    await marzban.add_user(username=marzban_username, expire_days=subscription_days)
                    logger.info(f"Successfully created Marzban user '{marzban_username}'.")
                    # –ò —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—à—É –ë–î
                    db.update_user_marzban_username(user_id, marzban_username)

            except httpx.HTTPStatusError as e:
                # –Ø–í–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–ö–ò 409
                if e.response.status_code == 409: # 409 Conflict - User already exists
                    logger.warning(f"Marzban user '{marzban_username}' already exists (409 Conflict). Modifying instead and fixing local DB.")
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–¥–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        await marzban.modify_user(username=marzban_username, expire_days=subscription_days)
                        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞—à—É –ë–î, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if not user_from_db.marzban_username:
                            db.update_user_marzban_username(user_id, marzban_username)
                        logger.info(f"Successfully modified existing user '{marzban_username}' after 409 conflict.")
                    except Exception as inner_e:
                        logger.error(f"CRITICAL: Failed to modify Marzban user '{marzban_username}' even after 409 conflict: {inner_e}", exc_info=True)
                        # TODO: –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –ª—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ HTTP (400, 500, –∏ —Ç.–¥.)
                    logger.error(f"CRITICAL: HTTP error while managing Marzban user {marzban_username}: {e}", exc_info=True)
                    # TODO: –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞

            except Exception as e:
                # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ (—Å–µ—Ç–µ–≤—ã–µ –∏ —Ç.–¥.)
                logger.error(f"CRITICAL: Generic error while managing Marzban user {marzban_username}: {e}", exc_info=True)
                # TODO: –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞

            # 3. –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
            if user_from_db and user_from_db.referrer_id and not user_from_db.is_first_payment_made:
                bonus_days = 7
                db.add_bonus_days(user_from_db.referrer_id, days=bonus_days)
                db.set_first_payment_done(user_id)
                logger.info(f"Referral bonus of {bonus_days} days awarded to user {user_from_db.referrer_id}.")
                try:
                    bot: Bot = request.app['bot']
                    await bot.send_message(user_from_db.referrer_id, f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∏–ª –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ **{bonus_days} –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π**.")
                except Exception as e:
                    logger.error(f"Could not send bonus notification to referrer {user_from_db.referrer_id}: {e}")

            # 4. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—Ö–µ
            try:
                bot: Bot = request.app['bot']
                await bot.send_message(user_id, f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à —Ç–∞—Ä–∏—Ñ '{tariff.name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {subscription_days} –¥–Ω–µ–π.")
            except Exception as e:
                logger.error(f"Could not send payment success notification to user {user_id}: {e}")

        return web.Response(status=200)

    except Exception as e:
        logger.error(f"FATAL: Unhandled error in yookassa_webhook_handler: {e}", exc_info=True)
        return web.Response(status=500)