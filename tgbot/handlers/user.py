from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
# --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –ò–ú–ü–û–†–¢–ê–• ---
# 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Bot –∏–∑ aiogram, —Ç.–∫. —Ç–µ–ø–µ—Ä—å –æ–Ω –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ —Ö–µ–Ω–¥–ª–µ—Ä—ã
# 2. –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç bot –∏–∑ loader, —Ç.–∫. –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å
# 3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –Ω–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from tgbot.keyboards.inline import (main_menu_keyboard, help_keyboard, 
                                    back_to_main_menu_keyboard, tariffs_keyboard)
# 4. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î
from database import requests as db
from tgbot.services import payment
from utils import logger
import logging

logger = logging.getLogger(__name__)
user_router = Router()

# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö /start ---
# –û–Ω —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ä—Ç, –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π
@user_router.message(CommandStart(deep_link=True, magic=F.args.startswith('ref')))
async def start_with_referral(message: Message, command: CommandObject, bot: Bot):
    """
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start —Å–æ–¥–µ—Ä–∂–∏—Ç deep-link,
    –∏ —ç—Ç–æ—Ç deep-link –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'ref'.
    –ü—Ä–∏–º–µ—Ä: /start ref123456
    """
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username
    
    # command.args ‚Äî —ç—Ç–æ –∏ –µ—Å—Ç—å –Ω–∞—à payload, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'ref123456'
    referrer_id = None
    try:
        potential_referrer_id = int(command.args[3:]) # –£–±–∏—Ä–∞–µ–º 'ref'
        if potential_referrer_id != user_id:
            if db.get_user(potential_referrer_id):
                referrer_id = potential_referrer_id
    except (ValueError, IndexError, TypeError):
        pass # –ï—Å–ª–∏ ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    user, created = db.get_or_create_user(user_id, full_name, username)

    if created and referrer_id:
        db.set_user_referrer(user_id, referrer_id)
        db.add_bonus_days(user_id, 3)
        await message.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø—Ä–∏—à–ª–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –∏ –ø–æ–ª—É—á–∏–ª–∏ **3 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω—è** –ø–æ–¥–ø–∏—Å–∫–∏!")
        try:
            await bot.send_message(referrer_id, f"–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name}!")
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –ø–æ—á–µ–º—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            logger.error(f"Could not send notification to referrer {referrer_id}: {e}")
            pass
    elif not created:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer(f'üëã –ü—Ä–∏–≤–µ—Ç, {full_name}!',
                         reply_markup=main_menu_keyboard())


@user_router.message(CommandStart())
async def user_start_default(message: Message):
    """
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã /start –ë–ï–ó –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
    –û–Ω –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ü–û–°–õ–ï —Ö–µ–Ω–¥–ª–µ—Ä–∞ —Å deep-link.
    """
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username

    # –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.get_or_create_user(user_id, full_name, username)
    
    await message.answer(f'üëã –ü—Ä–∏–≤–µ—Ç, {full_name}!\n\n'
                         '–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å VPN.\n'
                         '–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞ - <a href="https://github.com/yarodya1/telegram-vpn-bot">GitHub</a>',
                         reply_markup=main_menu_keyboard(), disable_web_page_preview=True)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø /help –ò –ö–ù–û–ü–ö–ò 'help_info' ---
# –û–±—ä–µ–¥–∏–Ω–∏–ª –≤–∞—à—É –ª–æ–≥–∏–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –∏ –∫–æ–ª–±—ç–∫–∞, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
async def show_help_info(message: Message):
    text = (
        '‚ÑπÔ∏è **–ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n\n'
        '–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ –±–∞–∑–µ '
        '<a href="https://github.com/XTLS/Xray-core">Xray-core</a> –∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Python.\n\n'
        '–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:'
    )
    await message.answer(text, reply_markup=help_keyboard(), disable_web_page_preview=True)

@user_router.message(Command('help'))
async def help_command_handler(message: Message):
    await show_help_info(message)

# –ú–µ–Ω—è–µ–º callback_data –Ω–∞ 'help_info' –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
@user_router.callback_query(F.data == 'help_info')
async def help_callback_handler(callback_query: CallbackQuery):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ä–æ–µ
    await callback_query.answer()
    await show_help_info(callback_query.message)


# --- –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ï–§–ï–†–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ –ò –ü–†–û–§–ò–õ–Ø ---

@user_router.callback_query(F.data == "referral_program")
async def referral_program_handler(call: CallbackQuery, bot: Bot):
    await call.answer()
    user_id = call.from_user.id
    bot_info = await bot.get_me()
    
    referral_link = f"https://t.me/{bot_info.username}?start=ref{user_id}"
    user_data = db.get_user(user_id)
    referral_count = db.count_user_referrals(user_id)
    
    text = (
        "ü§ù **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞**\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ —ç—Ç–æ –ø—Ä–∏—è—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã!\n\n"
        "üîó **–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:**\n"
        f"`{referral_link}`\n"
        "(–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)\n\n"
        f"üë§ **–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏:** {referral_count} —á–µ–ª.\n"
        f"üéÅ **–í–∞—à–∏ –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏:** {user_data.referral_bonus_days} –¥–Ω.\n\n"
        "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å **7 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π** –∑–∞ –∫–∞–∂–¥—É—é –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∞—à–∏–º –¥—Ä—É–≥–æ–º."
    )
    
    await call.message.edit_text(text, reply_markup=back_to_main_menu_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@user_router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu_handler(call: CallbackQuery):
    await call.answer()
    await call.message.edit_text(f'üëã –ü—Ä–∏–≤–µ—Ç, {call.from_user.full_name}!',
                                 reply_markup=main_menu_keyboard())

@user_router.callback_query(F.data == "buy_subscription")
async def buy_subscription_handler(call: CallbackQuery):
    await call.answer()
    
    # --- –û–¢–õ–ê–î–ö–ê ---
    logger.info(f"User {call.from_user.id} requested tariffs. Trying to fetch from DB...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏–∑ –ë–î
    active_tariffs = db.get_active_tariffs()
    
    # --- –û–¢–õ–ê–î–ö–ê ---
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–æ—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if active_tariffs:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —ç—Ç–æ –∏—Ç–µ—Ä–∞—Ç–æ—Ä, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å
        tariffs_list = list(active_tariffs)
        logger.info(f"Successfully fetched {len(tariffs_list)} tariffs from DB.")
        # –í—ã–≤–µ–¥–µ–º –≤ –ª–æ–≥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        for t in tariffs_list:
            logger.info(f" - Tariff: {t.name}, Price: {t.price}")
    else:
        logger.warning("db.get_active_tariffs() returned None or empty list.")
        
    if not tariffs_list:
        logger.error("No active tariffs found. Showing error message to user.")
        await call.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    await call.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:",
        reply_markup=tariffs_keyboard(tariffs_list)
    )
@user_router.callback_query(F.data.startswith("select_tariff_"))
async def select_tariff_handler(call: CallbackQuery, bot: Bot):
    await call.answer()
    tariff_id = int(call.data.split("_")[2]) # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–∞—Ä–∏—Ñ–∞ –∏–∑ "select_tariff_1"
    
    tariff = db.get_tariff_by_id(tariff_id)
    if not tariff:
        await call.message.edit_text("–û—à–∏–±–∫–∞! –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_id = call.from_user.id
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É –∏–∑ —Ç–∞—Ä–∏—Ñ–∞
    amount = tariff.price
    description = f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ '{tariff.name}'"
    
    bot_info = await bot.get_me()
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂, –Ω–æ —Ç–µ–ø–µ—Ä—å –≤ metadata –¥–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –∏ tariff_id!
    payment_url, payment_id = payment.create_payment(
        user_id=user_id, 
        amount=amount, 
        description=description, 
        bot_username=bot_info.username,
        # --- –í–ê–ñ–ù–û–ï –î–û–ü–û–õ–ù–ï–ù–ò–ï ---
        metadata={'user_id': str(user_id), 'tariff_id': tariff_id}
    )
    
    payment_kb = InlineKeyboardBuilder()
    payment_kb.button(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)
    payment_kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞", callback_data="buy_subscription")
    payment_kb.adjust(1)
    
    await call.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: **{tariff.name}**\n"
        f"–°—Ä–æ–∫: **{tariff.duration_days} –¥–Ω–µ–π**\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: **{tariff.price} RUB**\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.",
        reply_markup=payment_kb.as_markup()
    )
# --- –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ü–æ–ª—É—á–∏—Ç—å VPN" –∏ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" ---
# –ü–æ–∫–∞ —á—Ç–æ —Å–¥–µ–ª–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏

@user_router.callback_query(F.data == "get_vpn")
async def get_vpn_handler(call: CallbackQuery):
    await call.answer("–†–∞–∑–¥–µ–ª '–ü–æ–ª—É—á–∏—Ç—å VPN' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)

@user_router.callback_query(F.data == "my_profile")
async def my_profile_handler(call: CallbackQuery):
    # –ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.answer("–†–∞–∑–¥–µ–ª '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)