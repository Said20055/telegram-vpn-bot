# tgbot/handlers/user.py (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è, —á–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è —Å HTML)

from aiogram import Router, F, Bot
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from aiohttp.client_exceptions import ClientConnectionError

# --- –ò–º–ø–æ—Ä—Ç—ã ---
from datetime import datetime
from loader import logger
from database import requests as db
from marzban.init_client import MarzClientCache

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from tgbot.keyboards.inline import (
    main_menu_keyboard,
    help_keyboard,
    back_to_main_menu_keyboard,
    tariffs_keyboard,
    profile_keyboard
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
from tgbot.services import payment
from tgbot.services import qr_generator
from tgbot.services.utils import format_traffic, get_marzban_user_info, get_user_attribute


user_router = Router()


# =============================================================================
# --- –ë–õ–û–ö: –°–¢–ê–†–¢ –ë–û–¢–ê –ò –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê ---
# =============================================================================

@user_router.message(CommandStart(deep_link=True, magic=F.args.startswith('ref')))
async def start_with_referral(message: Message, command: CommandObject, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ."""
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username
    
    referrer_id = None
    try:
        potential_referrer_id = int(command.args[3:])
        if potential_referrer_id != user_id and db.get_user(potential_referrer_id):
            referrer_id = potential_referrer_id
    except (ValueError, IndexError, TypeError):
        pass

    user, created = db.get_or_create_user(user_id, full_name, username)

    if created and referrer_id:
        db.set_user_referrer(user_id, referrer_id)
        db.add_bonus_days(user_id, 3)
        await message.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –ø—Ä–∏—à–ª–∏ –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –∏ –ø–æ–ª—É—á–∏–ª–∏ <b>3 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω—è</b> –ø–æ–¥–ø–∏—Å–∫–∏!")
        try:
            await bot.send_message(referrer_id, f"–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name}!")
        except Exception as e:
            logger.error(f"Could not send notification to referrer {referrer_id}: {e}")
    elif not created:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ. –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    await message.answer(f'üëã –ü—Ä–∏–≤–µ—Ç, {full_name}!', reply_markup=main_menu_keyboard())


@user_router.message(CommandStart())
async def user_start_default(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start."""
    user_id = message.from_user.id
    full_name = message.from_user.full_name
    username = message.from_user.username
    db.get_or_create_user(user_id, full_name, username)
    
    await message.answer(
        f'üëã –ü—Ä–∏–≤–µ—Ç, {full_name}!\n\n'
        '–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å VPN.\n'
        '–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞ - <a href="https://github.com/yarodya1/telegram-vpn-bot">GitHub</a>',
        reply_markup=main_menu_keyboard(), disable_web_page_preview=True
    )


# =============================================================================
# --- –ë–õ–û–ö: –û–°–ù–û–í–ù–´–ï –†–ê–ó–î–ï–õ–´ –ú–ï–ù–Æ ---
# =============================================================================

@user_router.callback_query(F.data == 'help_info')
async def help_callback_handler(callback_query: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏."""
    await callback_query.answer()
    text = (
        '‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n'
        '–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ –±–∞–∑–µ '
        '<a href="https://github.com/XTLS/Xray-core">Xray-core</a> –∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Python.\n\n'
        '–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:'
    )
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text, —á—Ç–æ–±—ã –Ω–µ —Å–ª–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –º–µ–Ω—è—Ç—å —Å—Ç–∞—Ä–æ–µ
    await callback_query.message.edit_text(text, reply_markup=help_keyboard(), disable_web_page_preview=True)


@user_router.callback_query(F.data == "referral_program")
async def referral_program_handler(call: CallbackQuery, bot: Bot):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ."""
    await call.answer()
    user_id = call.from_user.id
    bot_info = await bot.get_me()
    referral_link = f"https://t.me/{bot_info.username}?start=ref{user_id}"
    user_data = db.get_user(user_id)
    referral_count = db.count_user_referrals(user_id)
    
    text = (
        "ü§ù <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–∞ —ç—Ç–æ –ø—Ä–∏—è—Ç–Ω—ã–µ –±–æ–Ω—É—Å—ã!\n\n"
        "üîó <b>–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:</b>\n"
        f"<code>{referral_link}</code>\n"
        "<i>(–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)</i>\n\n"
        f"üë§ <b>–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏:</b> {referral_count} —á–µ–ª.\n"
        f"üéÅ <b>–í–∞—à–∏ –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏:</b> {user_data.referral_bonus_days} –¥–Ω.\n\n"
        "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å <b>7 –±–æ–Ω—É—Å–Ω—ã—Ö –¥–Ω–µ–π</b> –∑–∞ –∫–∞–∂–¥—É—é –ø–µ—Ä–≤—É—é –æ–ø–ª–∞—Ç—É –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∞—à–∏–º –¥—Ä—É–≥–æ–º."
    )
    await call.message.edit_text(text, reply_markup=back_to_main_menu_keyboard())


@user_router.callback_query(F.data == "my_profile")
async def my_profile_handler(call: CallbackQuery, marzban: MarzClientCache):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Marzban –∏ QR-–∫–æ–¥–æ–º."""
    await call.answer("–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
    
    db_user, marzban_user = await get_marzban_user_info(call, marzban)
    if not marzban_user:
        return

    status = get_user_attribute(marzban_user, 'status', 'unknown')
    expire_ts = get_user_attribute(marzban_user, 'expire')
    expire_date = datetime.fromtimestamp(expire_ts).strftime('%d.%m.%Y %H:%M') if expire_ts else "–ù–∏–∫–æ–≥–¥–∞"
    
    used_traffic = get_user_attribute(marzban_user, 'used_traffic', 0)
    data_limit = get_user_attribute(marzban_user, 'data_limit')
    used_traffic_str = format_traffic(used_traffic)
    data_limit_str = "–ë–µ–∑–ª–∏–º–∏—Ç" if data_limit == 0 or data_limit is None else format_traffic(data_limit)

    sub_url = get_user_attribute(marzban_user, 'subscription_url', '')
    full_sub_url = f"https://{marzban._config.webhook.domain}{sub_url}" if sub_url else ""

    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üîë <b>–°—Ç–∞—Ç—É—Å:</b> <code>{status}</code>\n"
        f"üóì <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ:</b> <code>{expire_date}</code>\n\n"
        f"üìä <b>–¢—Ä–∞—Ñ–∏–∫:</b>\n"
        f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: <code>{used_traffic_str}</code>\n"
        f"–õ–∏–º–∏—Ç: <code>{data_limit_str}</code>\n\n"
        f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):</b>\n<code>{full_sub_url}</code>"
    )

    try:
        full_sub_url = get_user_attribute(marzban_user, 'subscription_url', '')
        if not full_sub_url:
            raise ValueError("Subscription URL is empty, can't generate QR code.")
        
        # Marzban –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL, –¥–µ–ª–∞–µ–º –µ–≥–æ –ø–æ–ª–Ω—ã–º
        full_sub_url = f"https://{marzban._config.webhook.domain}{full_sub_url}"

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê ---
        qr_code_stream = qr_generator.create_qr_code(full_sub_url)
        qr_photo = BufferedInputFile(qr_code_stream.getvalue(), filename="qr.png")
        
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        await call.message.delete()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å —Ñ–æ—Ç–æ
        await call.message.answer_photo(photo=qr_photo, caption=profile_text, reply_markup=profile_keyboard())

    except (ClientConnectionError, TelegramBadRequest) as e:
            logger.error(f"Network or Telegram API error while sending profile: {e}", exc_info=True)
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å —Ñ–æ—Ç–æ –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–∑-–∑–∞ —Å–µ—Ç–∏ –∏–ª–∏ API, –æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            await call.message.answer(profile_text, reply_markup=profile_keyboard())
    except Exception as e:
        logger.error(f"Generic error while sending profile with QR code: {e}", exc_info=True)
        # –ù–∞ —Å–ª—É—á–∞–π –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É—Å—Ç–æ–π URL)
    await call.message.edit_text(profile_text, reply_markup=profile_keyboard())


# tgbot/handlers/user.py (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π my_keys_handler)

@user_router.callback_query(F.data == "my_keys")
async def my_keys_handler(call: CallbackQuery, marzban: MarzClientCache):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∫–ª—é—á–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
    await call.answer()
    
    db_user, marzban_user = await get_marzban_user_info(call, marzban)
    if not marzban_user:
        return

    links = get_user_attribute(marzban_user, 'links', [])

    if not links:
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò ---
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        reply_markup = back_to_main_menu_keyboard()
        try:
            await call.message.edit_text(text, reply_markup=reply_markup)
        except TelegramBadRequest:
            await call.message.delete()
            await call.message.answer(text, reply_markup=reply_markup)
        return

    formatted_links = [f"<code>{link}</code>" for link in links]
    message_text = (
        "üîë <b>–í–æ—Ç –≤–∞—à–∏ –∫–ª—é—á–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n"
        "<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ, –∞ –∑–∞—Ç–µ–º –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –≤–∞—à–µ–º VPN-–∫–ª–∏–µ–Ω—Ç–µ.</i>\n\n" +
        "\n\n".join(formatted_links)
    )

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–¢–ü–†–ê–í–ö–ò ---
    reply_markup = back_to_main_menu_keyboard()
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —Ñ–æ—Ç–æ) –Ω–∞ –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ
        await call.message.edit_text(
            text=message_text,
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
    except TelegramBadRequest:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –±—ã–ª–æ —Ñ–æ—Ç–æ), —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∏ —à–ª–µ–º –Ω–æ–≤–æ–µ
        try:
            await call.message.delete()
        except TelegramBadRequest:
            pass # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å - –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ
        await call.message.answer(
            text=message_text,
            reply_markup=reply_markup,
            disable_web_page_preview=True
        )
        
# =============================================================================
# --- –ë–õ–û–ö: –ü–û–ö–£–ü–ö–ê –ò –û–ü–õ–ê–¢–ê ---
# =============================================================================

@user_router.callback_query(F.data == "buy_subscription")
async def buy_subscription_handler(call: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã."""
    await call.answer()
    active_tariffs = db.get_active_tariffs()
    tariffs_list = list(active_tariffs) if active_tariffs else []
        
    if not tariffs_list:
        logger.error("No active tariffs found for user %s.", call.from_user.id)
        await call.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=back_to_main_menu_keyboard()
        )
        return
        
    await call.message.edit_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:",
        reply_markup=tariffs_keyboard(tariffs_list)
    )


@user_router.callback_query(F.data.startswith("select_tariff_"))
async def select_tariff_handler(call: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É."""
    await call.answer()
    try:
        tariff_id = int(call.data.split("_")[2])
    except (IndexError, ValueError):
        await call.message.edit_text("–û—à–∏–±–∫–∞! –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.", reply_markup=back_to_main_menu_keyboard())
        return
    
    tariff = db.get_tariff_by_id(tariff_id)
    if not tariff:
        await call.message.edit_text("–û—à–∏–±–∫–∞! –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_to_main_menu_keyboard())
        return

    payment_url, _ = payment.create_payment(
        user_id=call.from_user.id,
        amount=tariff.price,
        description=f"–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞ '{tariff.name}'",
        bot_username=(await bot.get_me()).username,
        metadata={'user_id': str(call.from_user.id), 'tariff_id': tariff_id}
    )
    
    payment_kb = InlineKeyboardBuilder()
    payment_kb.button(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)
    payment_kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞", callback_data="buy_subscription")
    payment_kb.adjust(1)
    
    await call.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: <b>{tariff.name}</b>\n"
        f"–°—Ä–æ–∫: <b>{tariff.duration_days} –¥–Ω–µ–π</b>\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{tariff.price} RUB</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.",
        reply_markup=payment_kb.as_markup()
    )


# =============================================================================
# --- –ë–õ–û–ö: –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –•–ï–ù–î–õ–ï–†–´ ---
# =============================================================================

@user_router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu_handler(call: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await call.answer()
    text = f'üëã –ü—Ä–∏–≤–µ—Ç, {call.from_user.full_name}!'
    reply_markup = main_menu_keyboard()
    
    try:
        await call.message.edit_text(text, reply_markup=reply_markup)
    except TelegramBadRequest:
        try:
            await call.message.delete()
        except TelegramBadRequest:
            pass
        await call.message.answer(text, reply_markup=reply_markup)