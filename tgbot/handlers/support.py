from aiogram import Router, F, Bot, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder # –î–æ–±–∞–≤–∏–ª–∏
from loader import logger, config
from tgbot.filters.admin import IsAdmin 
from database import requests as db
from tgbot.keyboards.inline import close_support_chat_keyboard, main_menu_keyboard

support_router = Router()

class SupportFSM(StatesGroup):
    in_chat = State()


# --- –®–∞–≥ 1: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /support –∏–ª–∏ –∫–Ω–æ–ø–∫–µ ---

def support_intro_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"."""
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úçÔ∏è –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", callback_data="confirm_start_support")
    return builder.as_markup()


async def show_support_intro(event: types.Message | types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏."""
    text = (
        "üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥."
    )
    reply_markup = support_intro_keyboard()

    if isinstance(event, types.CallbackQuery):
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é)
        await event.message.edit_text(text, reply_markup=reply_markup)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /support
        await event.answer(text, reply_markup=reply_markup)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /support
@support_router.message(Command("support"))
async def support_command_handler(message: types.Message):
    await show_support_intro(message)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@support_router.callback_query(F.data == "support_chat_start")
async def support_callback_handler(call: types.CallbackQuery):
    await call.answer()
    await show_support_intro(call)


# --- –®–∞–≥ 2: –†–µ–∞–ª—å–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---

@support_router.callback_query(F.data == "confirm_start_support")
async def start_support_chat(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    user_id = call.from_user.id
    user = db.get_user(user_id)

    if user and user.support_topic_id:
        topic_id = user.support_topic_id
        text = "–í—ã —É–∂–µ –≤ —á–∞—Ç–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ."
    else:
        try:
            topic = await bot.create_forum_topic(
                chat_id=config.tg_bot.support_chat_id,
                name=f"–¢–∏–∫–µ—Ç #{user_id} | @{call.from_user.username or 'NoUsername'}"
            )
            topic_id = topic.message_thread_id
            db.set_user_support_topic(user_id, topic_id)
            
            await bot.send_message(
                chat_id=config.tg_bot.support_chat_id,
                message_thread_id=topic_id,
                text=f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{call.from_user.full_name}</b> (ID: <code>{user_id}</code>) –æ—Ç–∫—Ä—ã–ª –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç."
            )
            text = "–í—ã –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, –∏ –≤–∞–º —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç—è—Ç."
        except Exception as e:
            logger.error(f"Failed to create support topic for user {user_id}: {e}")
            await call.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return

    await call.message.edit_text(text, reply_markup=close_support_chat_keyboard())
    await state.set_state(SupportFSM.in_chat)
    await call.answer()

@support_router.callback_query(F.data == "support_chat_close", SupportFSM.in_chat)
async def close_support_chat_by_user(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    user_id = call.from_user.id
    user = db.get_user(user_id)
    
    if user and user.support_topic_id:
        await bot.send_message(
            chat_id=config.tg_bot.support_chat_id,
            message_thread_id=user.support_topic_id,
            text="üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥."
        )
    
    db.clear_user_support_topic(user_id)
    await call.message.edit_text("–î–∏–∞–ª–æ–≥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=main_menu_keyboard())

@support_router.message(SupportFSM.in_chat)
async def user_message_to_support_topic(message: Message, bot: Bot, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if not user or not user.support_topic_id:
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —á–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_keyboard())
        return

    await message.forward(
        chat_id=config.tg_bot.support_chat_id,
        message_thread_id=user.support_topic_id
    )

# --- –ù–û–í–´–ô –ë–õ–û–ö: –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–û–í –ò–ó –ì–†–£–ü–ü–´ –ü–û–î–î–ï–†–ñ–ö–ò ---
@support_router.message(
    F.chat.id == config.tg_bot.support_chat_id, 
    F.message_thread_id,
    Command("close") # <--- –õ–æ–≤–∏–º –∏–º–µ–Ω–Ω–æ –∫–æ–º–∞–Ω–¥—É
)
async def admin_close_topic_command(message: Message, bot: Bot):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–∏–∫–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ /close."""
    user_to_reply = db.get_user_by_support_topic(message.message_thread_id)
    if not user_to_reply:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã.")
        return

    try:
        await bot.send_message(
            user_to_reply.user_id, 
            "–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª –≤–∞—à –¥–∏–∞–ª–æ–≥. –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç."
        )
    except Exception as e:
        logger.warning(f"Could not send '/close' notification to user {user_to_reply.user_id}: {e}")
    
    db.clear_user_support_topic(user_to_reply.user_id)
    await bot.close_forum_topic(config.tg_bot.support_chat_id, message.message_thread_id)
    await message.reply("‚úÖ –¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.")


# --- –•–µ–Ω–¥–ª–µ—Ä ‚Ññ2: –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞ (–ù–ò–ó–®–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢) ---
@support_router.message(
    F.chat.id == config.tg_bot.support_chat_id, 
    F.message_thread_id
)
async def admin_reply_to_user_from_topic(message: Message, bot: Bot):
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ —Ü–∏–∫–ª–æ–≤
    if message.from_user.id == bot.id:
        return

    user_to_reply = db.get_user_by_support_topic(message.message_thread_id)
    if not user_to_reply:
        return

    # --- –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ ---
    try:
        # –ü—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ. –≠—Ç–æ —Å–∞–º—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±.
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –æ—à–∏–±–∫–∞ "can't be copied", —ç—Ç–æ –±—É–¥–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, 
        # —á—Ç–æ –∞–¥–º–∏–Ω –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ—Å–ª–∞—Ç—å —á—Ç–æ-—Ç–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–ø—Ä–æ—Å).
        await message.copy_to(chat_id=user_to_reply.user_id)
    except Exception as e:
        logger.error(f"Failed to send admin's reply to user {user_to_reply.user_id}: {e}", exc_info=True)
        await message.reply(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –û—à–∏–±–∫–∞: {e}")